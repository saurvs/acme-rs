/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl <T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl <T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl <T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __IncompleteArrayField<T> { }
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 23;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __ENUM_IDTYPE_T: ::std::os::raw::c_uint = 1;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const _STDIO_H: ::std::os::raw::c_uint = 1;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const _G_config_h: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uint = 1;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uint = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uint = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uint = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uint = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uint = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uint = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uint = 64;
pub const _IOS_BIN: ::std::os::raw::c_uint = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uint = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uint = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uint = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uint = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uint = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uint = 64;
pub const _IO_LINKED: ::std::os::raw::c_uint = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_uint = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_uint = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_uint = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uint = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uint = 1;
pub const _IO_LEFT: ::std::os::raw::c_uint = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uint = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uint = 8;
pub const _IO_DEC: ::std::os::raw::c_uint = 16;
pub const _IO_OCT: ::std::os::raw::c_uint = 32;
pub const _IO_HEX: ::std::os::raw::c_uint = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uint = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_uint = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_uint = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_uint = 2048;
pub const _IO_FIXED: ::std::os::raw::c_uint = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_STDIO: ::std::os::raw::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_uint = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 4096;
pub const L_ctermid: ::std::os::raw::c_uint = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 16;
pub const _ERRNO_H: ::std::os::raw::c_uint = 1;
pub const EPERM: ::std::os::raw::c_uint = 1;
pub const ENOENT: ::std::os::raw::c_uint = 2;
pub const ESRCH: ::std::os::raw::c_uint = 3;
pub const EINTR: ::std::os::raw::c_uint = 4;
pub const EIO: ::std::os::raw::c_uint = 5;
pub const ENXIO: ::std::os::raw::c_uint = 6;
pub const E2BIG: ::std::os::raw::c_uint = 7;
pub const ENOEXEC: ::std::os::raw::c_uint = 8;
pub const EBADF: ::std::os::raw::c_uint = 9;
pub const ECHILD: ::std::os::raw::c_uint = 10;
pub const EAGAIN: ::std::os::raw::c_uint = 11;
pub const ENOMEM: ::std::os::raw::c_uint = 12;
pub const EACCES: ::std::os::raw::c_uint = 13;
pub const EFAULT: ::std::os::raw::c_uint = 14;
pub const ENOTBLK: ::std::os::raw::c_uint = 15;
pub const EBUSY: ::std::os::raw::c_uint = 16;
pub const EEXIST: ::std::os::raw::c_uint = 17;
pub const EXDEV: ::std::os::raw::c_uint = 18;
pub const ENODEV: ::std::os::raw::c_uint = 19;
pub const ENOTDIR: ::std::os::raw::c_uint = 20;
pub const EISDIR: ::std::os::raw::c_uint = 21;
pub const EINVAL: ::std::os::raw::c_uint = 22;
pub const ENFILE: ::std::os::raw::c_uint = 23;
pub const EMFILE: ::std::os::raw::c_uint = 24;
pub const ENOTTY: ::std::os::raw::c_uint = 25;
pub const ETXTBSY: ::std::os::raw::c_uint = 26;
pub const EFBIG: ::std::os::raw::c_uint = 27;
pub const ENOSPC: ::std::os::raw::c_uint = 28;
pub const ESPIPE: ::std::os::raw::c_uint = 29;
pub const EROFS: ::std::os::raw::c_uint = 30;
pub const EMLINK: ::std::os::raw::c_uint = 31;
pub const EPIPE: ::std::os::raw::c_uint = 32;
pub const EDOM: ::std::os::raw::c_uint = 33;
pub const ERANGE: ::std::os::raw::c_uint = 34;
pub const EDEADLK: ::std::os::raw::c_uint = 35;
pub const ENAMETOOLONG: ::std::os::raw::c_uint = 36;
pub const ENOLCK: ::std::os::raw::c_uint = 37;
pub const ENOSYS: ::std::os::raw::c_uint = 38;
pub const ENOTEMPTY: ::std::os::raw::c_uint = 39;
pub const ELOOP: ::std::os::raw::c_uint = 40;
pub const EWOULDBLOCK: ::std::os::raw::c_uint = 11;
pub const ENOMSG: ::std::os::raw::c_uint = 42;
pub const EIDRM: ::std::os::raw::c_uint = 43;
pub const ECHRNG: ::std::os::raw::c_uint = 44;
pub const EL2NSYNC: ::std::os::raw::c_uint = 45;
pub const EL3HLT: ::std::os::raw::c_uint = 46;
pub const EL3RST: ::std::os::raw::c_uint = 47;
pub const ELNRNG: ::std::os::raw::c_uint = 48;
pub const EUNATCH: ::std::os::raw::c_uint = 49;
pub const ENOCSI: ::std::os::raw::c_uint = 50;
pub const EL2HLT: ::std::os::raw::c_uint = 51;
pub const EBADE: ::std::os::raw::c_uint = 52;
pub const EBADR: ::std::os::raw::c_uint = 53;
pub const EXFULL: ::std::os::raw::c_uint = 54;
pub const ENOANO: ::std::os::raw::c_uint = 55;
pub const EBADRQC: ::std::os::raw::c_uint = 56;
pub const EBADSLT: ::std::os::raw::c_uint = 57;
pub const EDEADLOCK: ::std::os::raw::c_uint = 35;
pub const EBFONT: ::std::os::raw::c_uint = 59;
pub const ENOSTR: ::std::os::raw::c_uint = 60;
pub const ENODATA: ::std::os::raw::c_uint = 61;
pub const ETIME: ::std::os::raw::c_uint = 62;
pub const ENOSR: ::std::os::raw::c_uint = 63;
pub const ENONET: ::std::os::raw::c_uint = 64;
pub const ENOPKG: ::std::os::raw::c_uint = 65;
pub const EREMOTE: ::std::os::raw::c_uint = 66;
pub const ENOLINK: ::std::os::raw::c_uint = 67;
pub const EADV: ::std::os::raw::c_uint = 68;
pub const ESRMNT: ::std::os::raw::c_uint = 69;
pub const ECOMM: ::std::os::raw::c_uint = 70;
pub const EPROTO: ::std::os::raw::c_uint = 71;
pub const EMULTIHOP: ::std::os::raw::c_uint = 72;
pub const EDOTDOT: ::std::os::raw::c_uint = 73;
pub const EBADMSG: ::std::os::raw::c_uint = 74;
pub const EOVERFLOW: ::std::os::raw::c_uint = 75;
pub const ENOTUNIQ: ::std::os::raw::c_uint = 76;
pub const EBADFD: ::std::os::raw::c_uint = 77;
pub const EREMCHG: ::std::os::raw::c_uint = 78;
pub const ELIBACC: ::std::os::raw::c_uint = 79;
pub const ELIBBAD: ::std::os::raw::c_uint = 80;
pub const ELIBSCN: ::std::os::raw::c_uint = 81;
pub const ELIBMAX: ::std::os::raw::c_uint = 82;
pub const ELIBEXEC: ::std::os::raw::c_uint = 83;
pub const EILSEQ: ::std::os::raw::c_uint = 84;
pub const ERESTART: ::std::os::raw::c_uint = 85;
pub const ESTRPIPE: ::std::os::raw::c_uint = 86;
pub const EUSERS: ::std::os::raw::c_uint = 87;
pub const ENOTSOCK: ::std::os::raw::c_uint = 88;
pub const EDESTADDRREQ: ::std::os::raw::c_uint = 89;
pub const EMSGSIZE: ::std::os::raw::c_uint = 90;
pub const EPROTOTYPE: ::std::os::raw::c_uint = 91;
pub const ENOPROTOOPT: ::std::os::raw::c_uint = 92;
pub const EPROTONOSUPPORT: ::std::os::raw::c_uint = 93;
pub const ESOCKTNOSUPPORT: ::std::os::raw::c_uint = 94;
pub const EOPNOTSUPP: ::std::os::raw::c_uint = 95;
pub const EPFNOSUPPORT: ::std::os::raw::c_uint = 96;
pub const EAFNOSUPPORT: ::std::os::raw::c_uint = 97;
pub const EADDRINUSE: ::std::os::raw::c_uint = 98;
pub const EADDRNOTAVAIL: ::std::os::raw::c_uint = 99;
pub const ENETDOWN: ::std::os::raw::c_uint = 100;
pub const ENETUNREACH: ::std::os::raw::c_uint = 101;
pub const ENETRESET: ::std::os::raw::c_uint = 102;
pub const ECONNABORTED: ::std::os::raw::c_uint = 103;
pub const ECONNRESET: ::std::os::raw::c_uint = 104;
pub const ENOBUFS: ::std::os::raw::c_uint = 105;
pub const EISCONN: ::std::os::raw::c_uint = 106;
pub const ENOTCONN: ::std::os::raw::c_uint = 107;
pub const ESHUTDOWN: ::std::os::raw::c_uint = 108;
pub const ETOOMANYREFS: ::std::os::raw::c_uint = 109;
pub const ETIMEDOUT: ::std::os::raw::c_uint = 110;
pub const ECONNREFUSED: ::std::os::raw::c_uint = 111;
pub const EHOSTDOWN: ::std::os::raw::c_uint = 112;
pub const EHOSTUNREACH: ::std::os::raw::c_uint = 113;
pub const EALREADY: ::std::os::raw::c_uint = 114;
pub const EINPROGRESS: ::std::os::raw::c_uint = 115;
pub const ESTALE: ::std::os::raw::c_uint = 116;
pub const EUCLEAN: ::std::os::raw::c_uint = 117;
pub const ENOTNAM: ::std::os::raw::c_uint = 118;
pub const ENAVAIL: ::std::os::raw::c_uint = 119;
pub const EISNAM: ::std::os::raw::c_uint = 120;
pub const EREMOTEIO: ::std::os::raw::c_uint = 121;
pub const EDQUOT: ::std::os::raw::c_uint = 122;
pub const ENOMEDIUM: ::std::os::raw::c_uint = 123;
pub const EMEDIUMTYPE: ::std::os::raw::c_uint = 124;
pub const ECANCELED: ::std::os::raw::c_uint = 125;
pub const ENOKEY: ::std::os::raw::c_uint = 126;
pub const EKEYEXPIRED: ::std::os::raw::c_uint = 127;
pub const EKEYREVOKED: ::std::os::raw::c_uint = 128;
pub const EKEYREJECTED: ::std::os::raw::c_uint = 129;
pub const EOWNERDEAD: ::std::os::raw::c_uint = 130;
pub const ENOTRECOVERABLE: ::std::os::raw::c_uint = 131;
pub const ERFKILL: ::std::os::raw::c_uint = 132;
pub const EHWPOISON: ::std::os::raw::c_uint = 133;
pub const ENOTSUP: ::std::os::raw::c_uint = 95;
pub const _UNISTD_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_VERSION: ::std::os::raw::c_uint = 200809;
pub const __POSIX2_THIS_VERSION: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_VERSION: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_C_VERSION: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_C_BIND: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_C_DEV: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_SW_DEV: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_LOCALEDEF: ::std::os::raw::c_uint = 200809;
pub const _XOPEN_VERSION: ::std::os::raw::c_uint = 700;
pub const _XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 4;
pub const _XOPEN_XPG2: ::std::os::raw::c_uint = 1;
pub const _XOPEN_XPG3: ::std::os::raw::c_uint = 1;
pub const _XOPEN_XPG4: ::std::os::raw::c_uint = 1;
pub const _XOPEN_UNIX: ::std::os::raw::c_uint = 1;
pub const _XOPEN_CRYPT: ::std::os::raw::c_uint = 1;
pub const _XOPEN_ENH_I18N: ::std::os::raw::c_uint = 1;
pub const _XOPEN_LEGACY: ::std::os::raw::c_uint = 1;
pub const _BITS_POSIX_OPT_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_JOB_CONTROL: ::std::os::raw::c_uint = 1;
pub const _POSIX_SAVED_IDS: ::std::os::raw::c_uint = 1;
pub const _POSIX_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 200809;
pub const _POSIX_FSYNC: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MAPPED_FILES: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MEMLOCK: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MEMLOCK_RANGE: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MEMORY_PROTECTION: ::std::os::raw::c_uint = 200809;
pub const _POSIX_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 0;
pub const _POSIX_VDISABLE: u8 = b'\x00';
pub const _POSIX_NO_TRUNC: ::std::os::raw::c_uint = 1;
pub const _XOPEN_REALTIME: ::std::os::raw::c_uint = 1;
pub const _XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 1;
pub const _XOPEN_SHM: ::std::os::raw::c_uint = 1;
pub const _POSIX_THREADS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: ::std::os::raw::c_uint = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_int = -1;
pub const _POSIX_SEMAPHORES: ::std::os::raw::c_uint = 200809;
pub const _POSIX_REALTIME_SIGNALS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 200809;
pub const _POSIX_ASYNC_IO: ::std::os::raw::c_uint = 1;
pub const _LFS_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 1;
pub const _POSIX_PRIORITIZED_IO: ::std::os::raw::c_uint = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 1;
pub const _LFS_LARGEFILE: ::std::os::raw::c_uint = 1;
pub const _LFS64_LARGEFILE: ::std::os::raw::c_uint = 1;
pub const _LFS64_STDIO: ::std::os::raw::c_uint = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_CPUTIME: ::std::os::raw::c_uint = 0;
pub const _POSIX_THREAD_CPUTIME: ::std::os::raw::c_uint = 0;
pub const _POSIX_REGEXP: ::std::os::raw::c_uint = 1;
pub const _POSIX_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SHELL: ::std::os::raw::c_uint = 1;
pub const _POSIX_TIMEOUTS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SPIN_LOCKS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SPAWN: ::std::os::raw::c_uint = 200809;
pub const _POSIX_TIMERS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_BARRIERS: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MESSAGE_PASSING: ::std::os::raw::c_uint = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 200809;
pub const _POSIX_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 0;
pub const _POSIX_CLOCK_SELECTION: ::std::os::raw::c_uint = 200809;
pub const _POSIX_ADVISORY_INFO: ::std::os::raw::c_uint = 200809;
pub const _POSIX_IPV6: ::std::os::raw::c_uint = 200809;
pub const _POSIX_RAW_SOCKETS: ::std::os::raw::c_uint = 200809;
pub const _POSIX2_CHAR_TERM: ::std::os::raw::c_uint = 200809;
pub const _POSIX_SPORADIC_SERVER: ::std::os::raw::c_int = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE_EVENT_FILTER: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE_INHERIT: ::std::os::raw::c_int = -1;
pub const _POSIX_TRACE_LOG: ::std::os::raw::c_int = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_int = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: ::std::os::raw::c_int = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: ::std::os::raw::c_int = -1;
pub const _XBS5_LPBIG_OFFBIG: ::std::os::raw::c_int = -1;
pub const _POSIX_V7_LP64_OFF64: ::std::os::raw::c_uint = 1;
pub const _POSIX_V6_LP64_OFF64: ::std::os::raw::c_uint = 1;
pub const _XBS5_LP64_OFF64: ::std::os::raw::c_uint = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\x00";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\x00";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\x00";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\x00";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\x00";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\x00";
pub const STDIN_FILENO: ::std::os::raw::c_uint = 0;
pub const STDOUT_FILENO: ::std::os::raw::c_uint = 1;
pub const STDERR_FILENO: ::std::os::raw::c_uint = 2;
pub const R_OK: ::std::os::raw::c_uint = 4;
pub const W_OK: ::std::os::raw::c_uint = 2;
pub const X_OK: ::std::os::raw::c_uint = 1;
pub const F_OK: ::std::os::raw::c_uint = 0;
pub const L_SET: ::std::os::raw::c_uint = 0;
pub const L_INCR: ::std::os::raw::c_uint = 1;
pub const L_XTND: ::std::os::raw::c_uint = 2;
pub const F_ULOCK: ::std::os::raw::c_uint = 0;
pub const F_LOCK: ::std::os::raw::c_uint = 1;
pub const F_TLOCK: ::std::os::raw::c_uint = 2;
pub const F_TEST: ::std::os::raw::c_uint = 3;
pub const _STRING_H: ::std::os::raw::c_uint = 1;
pub const _XLOCALE_H: ::std::os::raw::c_uint = 1;
pub const _SYS_PARAM_H: ::std::os::raw::c_uint = 1;
pub const _LIBC_LIMITS_H_: ::std::os::raw::c_uint = 1;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 16;
pub const _BITS_POSIX1_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uint = 1;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_uint = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uint = 25;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uint = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const NR_OPEN: ::std::os::raw::c_uint = 1024;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 65536;
pub const ARG_MAX: ::std::os::raw::c_uint = 131072;
pub const LINK_MAX: ::std::os::raw::c_uint = 127;
pub const MAX_CANON: ::std::os::raw::c_uint = 255;
pub const MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const NAME_MAX: ::std::os::raw::c_uint = 255;
pub const PATH_MAX: ::std::os::raw::c_uint = 4096;
pub const PIPE_BUF: ::std::os::raw::c_uint = 4096;
pub const XATTR_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const XATTR_SIZE_MAX: ::std::os::raw::c_uint = 65536;
pub const XATTR_LIST_MAX: ::std::os::raw::c_uint = 65536;
pub const RTSIG_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 128;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_uint = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 64;
pub const AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 20;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_uint = 16384;
pub const DELAYTIMER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TTY_NAME_MAX: ::std::os::raw::c_uint = 32;
pub const LOGIN_NAME_MAX: ::std::os::raw::c_uint = 256;
pub const HOST_NAME_MAX: ::std::os::raw::c_uint = 64;
pub const MQ_PRIO_MAX: ::std::os::raw::c_uint = 32768;
pub const SEM_VALUE_MAX: ::std::os::raw::c_uint = 2147483647;
pub const _BITS_POSIX2_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 255;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_uint = 32767;
pub const _SIGSET_H_fns: ::std::os::raw::c_uint = 1;
pub const SIGHUP: ::std::os::raw::c_uint = 1;
pub const SIGINT: ::std::os::raw::c_uint = 2;
pub const SIGQUIT: ::std::os::raw::c_uint = 3;
pub const SIGILL: ::std::os::raw::c_uint = 4;
pub const SIGTRAP: ::std::os::raw::c_uint = 5;
pub const SIGABRT: ::std::os::raw::c_uint = 6;
pub const SIGIOT: ::std::os::raw::c_uint = 6;
pub const SIGBUS: ::std::os::raw::c_uint = 7;
pub const SIGFPE: ::std::os::raw::c_uint = 8;
pub const SIGKILL: ::std::os::raw::c_uint = 9;
pub const SIGUSR1: ::std::os::raw::c_uint = 10;
pub const SIGSEGV: ::std::os::raw::c_uint = 11;
pub const SIGUSR2: ::std::os::raw::c_uint = 12;
pub const SIGPIPE: ::std::os::raw::c_uint = 13;
pub const SIGALRM: ::std::os::raw::c_uint = 14;
pub const SIGTERM: ::std::os::raw::c_uint = 15;
pub const SIGSTKFLT: ::std::os::raw::c_uint = 16;
pub const SIGCHLD: ::std::os::raw::c_uint = 17;
pub const SIGCONT: ::std::os::raw::c_uint = 18;
pub const SIGSTOP: ::std::os::raw::c_uint = 19;
pub const SIGTSTP: ::std::os::raw::c_uint = 20;
pub const SIGTTIN: ::std::os::raw::c_uint = 21;
pub const SIGTTOU: ::std::os::raw::c_uint = 22;
pub const SIGURG: ::std::os::raw::c_uint = 23;
pub const SIGXCPU: ::std::os::raw::c_uint = 24;
pub const SIGXFSZ: ::std::os::raw::c_uint = 25;
pub const SIGVTALRM: ::std::os::raw::c_uint = 26;
pub const SIGPROF: ::std::os::raw::c_uint = 27;
pub const SIGWINCH: ::std::os::raw::c_uint = 28;
pub const SIGIO: ::std::os::raw::c_uint = 29;
pub const SIGPWR: ::std::os::raw::c_uint = 30;
pub const SIGSYS: ::std::os::raw::c_uint = 31;
pub const SIGUNUSED: ::std::os::raw::c_uint = 31;
pub const _NSIG: ::std::os::raw::c_uint = 65;
pub const __SIGRTMIN: ::std::os::raw::c_uint = 32;
pub const __SIGRTMAX: ::std::os::raw::c_uint = 64;
pub const __have_sigval_t: ::std::os::raw::c_uint = 1;
pub const __have_siginfo_t: ::std::os::raw::c_uint = 1;
pub const __SI_MAX_SIZE: ::std::os::raw::c_uint = 128;
pub const __have_sigevent_t: ::std::os::raw::c_uint = 1;
pub const __SIGEV_MAX_SIZE: ::std::os::raw::c_uint = 64;
pub const NSIG: ::std::os::raw::c_uint = 65;
pub const SA_NOCLDSTOP: ::std::os::raw::c_uint = 1;
pub const SA_NOCLDWAIT: ::std::os::raw::c_uint = 2;
pub const SA_SIGINFO: ::std::os::raw::c_uint = 4;
pub const SA_ONSTACK: ::std::os::raw::c_uint = 134217728;
pub const SA_RESTART: ::std::os::raw::c_uint = 268435456;
pub const SA_NODEFER: ::std::os::raw::c_uint = 1073741824;
pub const SA_RESETHAND: ::std::os::raw::c_uint = 2147483648;
pub const SA_INTERRUPT: ::std::os::raw::c_uint = 536870912;
pub const SA_NOMASK: ::std::os::raw::c_uint = 1073741824;
pub const SA_ONESHOT: ::std::os::raw::c_uint = 2147483648;
pub const SA_STACK: ::std::os::raw::c_uint = 134217728;
pub const SIG_BLOCK: ::std::os::raw::c_uint = 0;
pub const SIG_UNBLOCK: ::std::os::raw::c_uint = 1;
pub const SIG_SETMASK: ::std::os::raw::c_uint = 2;
pub const _BITS_SIGCONTEXT_H: ::std::os::raw::c_uint = 1;
pub const FP_XSTATE_MAGIC1: ::std::os::raw::c_uint = 1179670611;
pub const FP_XSTATE_MAGIC2: ::std::os::raw::c_uint = 1179670597;
pub const MINSIGSTKSZ: ::std::os::raw::c_uint = 2048;
pub const SIGSTKSZ: ::std::os::raw::c_uint = 8192;
pub const _SYS_UCONTEXT_H: ::std::os::raw::c_uint = 1;
pub const NGREG: ::std::os::raw::c_uint = 23;
pub const _BITS_SIGTHREAD_H: ::std::os::raw::c_uint = 1;
pub const HZ: ::std::os::raw::c_uint = 100;
pub const EXEC_PAGESIZE: ::std::os::raw::c_uint = 4096;
pub const NOGROUP: ::std::os::raw::c_int = -1;
pub const MAXHOSTNAMELEN: ::std::os::raw::c_uint = 64;
pub const MAXSYMLINKS: ::std::os::raw::c_uint = 20;
pub const NOFILE: ::std::os::raw::c_uint = 256;
pub const NCARGS: ::std::os::raw::c_uint = 131072;
pub const NGROUPS: ::std::os::raw::c_uint = 65536;
pub const CANBSIZ: ::std::os::raw::c_uint = 255;
pub const MAXPATHLEN: ::std::os::raw::c_uint = 4096;
pub const DEV_BSIZE: ::std::os::raw::c_uint = 512;
pub const _SYS_TIME_H: ::std::os::raw::c_uint = 1;
pub const _TIME_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TIME_H: ::std::os::raw::c_uint = 1;
pub const CLOCK_REALTIME: ::std::os::raw::c_uint = 0;
pub const CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: ::std::os::raw::c_uint = 2;
pub const CLOCK_THREAD_CPUTIME_ID: ::std::os::raw::c_uint = 3;
pub const CLOCK_MONOTONIC_RAW: ::std::os::raw::c_uint = 4;
pub const CLOCK_REALTIME_COARSE: ::std::os::raw::c_uint = 5;
pub const CLOCK_MONOTONIC_COARSE: ::std::os::raw::c_uint = 6;
pub const CLOCK_BOOTTIME: ::std::os::raw::c_uint = 7;
pub const CLOCK_REALTIME_ALARM: ::std::os::raw::c_uint = 8;
pub const CLOCK_BOOTTIME_ALARM: ::std::os::raw::c_uint = 9;
pub const CLOCK_TAI: ::std::os::raw::c_uint = 11;
pub const TIMER_ABSTIME: ::std::os::raw::c_uint = 1;
pub const TIME_UTC: ::std::os::raw::c_uint = 1;
pub const HAVE_STAT_TIMESPEC: ::std::os::raw::c_uint = 1;
pub const HAVE_CONST_LONGLONG: ::std::os::raw::c_uint = 1;
pub const HAVE_CONST_DIRENT: ::std::os::raw::c_uint = 1;
pub const HAVE_DIRENT_D_OFF: ::std::os::raw::c_uint = 1;
pub const HAVE_PRINTF_P_PFX: ::std::os::raw::c_uint = 1;
pub const PRINTF_P_PFX: &'static [u8; 1usize] = b"\x00";
pub const HAVE_CAST_U64_DOUBLE: ::std::os::raw::c_uint = 1;
pub const HAVE_BITS_WORDSIZE_H: ::std::os::raw::c_uint = 1;
pub const HAVE_64BIT_LONG: ::std::os::raw::c_uint = 1;
pub const HAVE_64BIT_PTR: ::std::os::raw::c_uint = 1;
pub const PM_SIZEOF_SUSECONDS_T: ::std::os::raw::c_uint = 8;
pub const PM_SIZEOF_TIME_T: ::std::os::raw::c_uint = 8;
pub const HAVE_FCNTL_H: ::std::os::raw::c_uint = 1;
pub const HAVE_LIMITS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STRINGS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYSLOG_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STDDEF_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SCHED_H: ::std::os::raw::c_uint = 1;
pub const HAVE_DLFCN_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_TIMES_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_SYSINFO_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_RESOURCE_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_PRCTL_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_STATVFS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_STATFS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_MOUNT_H: ::std::os::raw::c_uint = 1;
pub const HAVE_ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const HAVE_PTHREAD_H: ::std::os::raw::c_uint = 1;
pub const HAVE_LIBGEN_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_MMAN_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_UN_H: ::std::os::raw::c_uint = 1;
pub const HAVE_STDINT_H: ::std::os::raw::c_uint = 1;
pub const HAVE_VALUES_H: ::std::os::raw::c_uint = 1;
pub const HAVE_MATH_H: ::std::os::raw::c_uint = 1;
pub const HAVE_PWD_H: ::std::os::raw::c_uint = 1;
pub const HAVE_GRP_H: ::std::os::raw::c_uint = 1;
pub const HAVE_REGEX_H: ::std::os::raw::c_uint = 1;
pub const HAVE_TERMIO_H: ::std::os::raw::c_uint = 1;
pub const HAVE_TERMIOS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_TERMIOS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_IOCTL_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_WAIT_H: ::std::os::raw::c_uint = 1;
pub const HAVE_EXECINFO_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const HAVE_SYS_SOCKET_H: ::std::os::raw::c_uint = 1;
pub const HAVE_NETDB_H: ::std::os::raw::c_uint = 1;
pub const HAVE_NET_IF_H: ::std::os::raw::c_uint = 1;
pub const HAVE_NETINET_IN_H: ::std::os::raw::c_uint = 1;
pub const HAVE_NETINET_TCP_H: ::std::os::raw::c_uint = 1;
pub const HAVE_ARPA_INET_H: ::std::os::raw::c_uint = 1;
pub const HAVE_FTS_H: ::std::os::raw::c_uint = 1;
pub const HAVE_AI_ADDRCONFIG: ::std::os::raw::c_uint = 1;
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const _SYS_SYSLOG_H: ::std::os::raw::c_uint = 1;
pub const _BITS_SYSLOG_PATH_H: ::std::os::raw::c_uint = 1;
pub const _PATH_LOG: &'static [u8; 9usize] = b"/dev/log\x00";
pub const LOG_EMERG: ::std::os::raw::c_uint = 0;
pub const LOG_ALERT: ::std::os::raw::c_uint = 1;
pub const LOG_CRIT: ::std::os::raw::c_uint = 2;
pub const LOG_ERR: ::std::os::raw::c_uint = 3;
pub const LOG_WARNING: ::std::os::raw::c_uint = 4;
pub const LOG_NOTICE: ::std::os::raw::c_uint = 5;
pub const LOG_INFO: ::std::os::raw::c_uint = 6;
pub const LOG_DEBUG: ::std::os::raw::c_uint = 7;
pub const LOG_PRIMASK: ::std::os::raw::c_uint = 7;
pub const LOG_KERN: ::std::os::raw::c_uint = 0;
pub const LOG_USER: ::std::os::raw::c_uint = 8;
pub const LOG_MAIL: ::std::os::raw::c_uint = 16;
pub const LOG_DAEMON: ::std::os::raw::c_uint = 24;
pub const LOG_AUTH: ::std::os::raw::c_uint = 32;
pub const LOG_SYSLOG: ::std::os::raw::c_uint = 40;
pub const LOG_LPR: ::std::os::raw::c_uint = 48;
pub const LOG_NEWS: ::std::os::raw::c_uint = 56;
pub const LOG_UUCP: ::std::os::raw::c_uint = 64;
pub const LOG_CRON: ::std::os::raw::c_uint = 72;
pub const LOG_AUTHPRIV: ::std::os::raw::c_uint = 80;
pub const LOG_FTP: ::std::os::raw::c_uint = 88;
pub const LOG_LOCAL0: ::std::os::raw::c_uint = 128;
pub const LOG_LOCAL1: ::std::os::raw::c_uint = 136;
pub const LOG_LOCAL2: ::std::os::raw::c_uint = 144;
pub const LOG_LOCAL3: ::std::os::raw::c_uint = 152;
pub const LOG_LOCAL4: ::std::os::raw::c_uint = 160;
pub const LOG_LOCAL5: ::std::os::raw::c_uint = 168;
pub const LOG_LOCAL6: ::std::os::raw::c_uint = 176;
pub const LOG_LOCAL7: ::std::os::raw::c_uint = 184;
pub const LOG_NFACILITIES: ::std::os::raw::c_uint = 24;
pub const LOG_FACMASK: ::std::os::raw::c_uint = 1016;
pub const LOG_PID: ::std::os::raw::c_uint = 1;
pub const LOG_CONS: ::std::os::raw::c_uint = 2;
pub const LOG_ODELAY: ::std::os::raw::c_uint = 4;
pub const LOG_NDELAY: ::std::os::raw::c_uint = 8;
pub const LOG_NOWAIT: ::std::os::raw::c_uint = 16;
pub const LOG_PERROR: ::std::os::raw::c_uint = 32;
pub const HAVE_SECURE_SOCKETS: ::std::os::raw::c_uint = 1;
pub const HAVE_READLINE: ::std::os::raw::c_uint = 1;
pub const HAVE_WAIT3: ::std::os::raw::c_uint = 1;
pub const HAVE_MKTIME: ::std::os::raw::c_uint = 1;
pub const HAVE_CLOCK_GETTIME: ::std::os::raw::c_uint = 1;
pub const HAVE_NANOSLEEP: ::std::os::raw::c_uint = 1;
pub const HAVE_USLEEP: ::std::os::raw::c_uint = 1;
pub const HAVE_UNSETENV: ::std::os::raw::c_uint = 1;
pub const HAVE_SELECT: ::std::os::raw::c_uint = 1;
pub const HAVE_SOCKET: ::std::os::raw::c_uint = 1;
pub const HAVE_GETHOSTNAME: ::std::os::raw::c_uint = 1;
pub const HAVE_UNAME: ::std::os::raw::c_uint = 1;
pub const HAVE_SYSLOG: ::std::os::raw::c_uint = 1;
pub const HAVE___CLONE: ::std::os::raw::c_uint = 1;
pub const HAVE_PIPE2: ::std::os::raw::c_uint = 1;
pub const HAVE_FCNTL: ::std::os::raw::c_uint = 1;
pub const HAVE_PRCTL: ::std::os::raw::c_uint = 1;
pub const HAVE_SETLINEBUF: ::std::os::raw::c_uint = 1;
pub const HAVE_WAITPID: ::std::os::raw::c_uint = 1;
pub const HAVE_ATEXIT: ::std::os::raw::c_uint = 1;
pub const HAVE_KILL: ::std::os::raw::c_uint = 1;
pub const HAVE_CHOWN: ::std::os::raw::c_uint = 1;
pub const HAVE_FCHMOD: ::std::os::raw::c_uint = 1;
pub const HAVE_GETCWD: ::std::os::raw::c_uint = 1;
pub const HAVE_SCANDIR: ::std::os::raw::c_uint = 1;
pub const HAVE_MKSTEMP: ::std::os::raw::c_uint = 1;
pub const HAVE_GETUID: ::std::os::raw::c_uint = 1;
pub const HAVE_GETGID: ::std::os::raw::c_uint = 1;
pub const HAVE_GETGRENT: ::std::os::raw::c_uint = 1;
pub const HAVE_GETGRENT_R: ::std::os::raw::c_uint = 1;
pub const HAVE_GETGRNAM: ::std::os::raw::c_uint = 1;
pub const HAVE_GETGRNAM_R: ::std::os::raw::c_uint = 1;
pub const HAVE_GETGRGID: ::std::os::raw::c_uint = 1;
pub const HAVE_GETGRGID_R: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPWENT: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPWENT_R: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPWNAM: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPWNAM_R: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPWUID: ::std::os::raw::c_uint = 1;
pub const HAVE_GETPWUID_R: ::std::os::raw::c_uint = 1;
pub const HAVE_BRK: ::std::os::raw::c_uint = 1;
pub const HAVE_SBRK: ::std::os::raw::c_uint = 1;
pub const HAVE_POSIX_MEMALIGN: ::std::os::raw::c_uint = 1;
pub const HAVE_MEMALIGN: ::std::os::raw::c_uint = 1;
pub const HAVE_VALLOC: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGNAL: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGHOLD: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGRELSE: ::std::os::raw::c_uint = 1;
pub const HAVE_TCGETATTR: ::std::os::raw::c_uint = 1;
pub const GWINSZ_IN_SYS_IOCTL: ::std::os::raw::c_uint = 1;
pub const HAVE_REGEXEC: ::std::os::raw::c_uint = 1;
pub const HAVE_REGCOMP: ::std::os::raw::c_uint = 1;
pub const HAVE_STRTOD: ::std::os::raw::c_uint = 1;
pub const HAVE_STRTOL: ::std::os::raw::c_uint = 1;
pub const HAVE_STRTOLL: ::std::os::raw::c_uint = 1;
pub const HAVE_STRTOULL: ::std::os::raw::c_uint = 1;
pub const HAVE_STRNDUP: ::std::os::raw::c_uint = 1;
pub const HAVE_STRCHRNUL: ::std::os::raw::c_uint = 1;
pub const HAVE_DLOPEN: ::std::os::raw::c_uint = 1;
pub const HAVE_FPCLASSIFY: ::std::os::raw::c_uint = 1;
pub const HAVE_POW: ::std::os::raw::c_uint = 1;
pub const HAVE_DIRNAME: ::std::os::raw::c_uint = 1;
pub const HAVE_BASENAME: ::std::os::raw::c_uint = 1;
pub const HAVE_SYSINFO: ::std::os::raw::c_uint = 1;
pub const HAVE_BACKTRACE: ::std::os::raw::c_uint = 1;
pub const HAVE_SENDMSG: ::std::os::raw::c_uint = 1;
pub const HAVE_RECVMSG: ::std::os::raw::c_uint = 1;
pub const HAVE_SETNS: ::std::os::raw::c_uint = 1;
pub const HAVE_PAPI_DISABLED_COMP: ::std::os::raw::c_uint = 1;
pub const HAVE_PROCFS: ::std::os::raw::c_uint = 1;
pub const HAVE_PMA_QUERY_VIA: ::std::os::raw::c_uint = 1;
pub const HAVE_PTRDIFF_T: ::std::os::raw::c_uint = 1;
pub const HAVE_UID_T: ::std::os::raw::c_uint = 1;
pub const HAVE_GID_T: ::std::os::raw::c_uint = 1;
pub const HAVE_SOCKLEN_T: ::std::os::raw::c_uint = 1;
pub const _SYS_SOCKET_H: ::std::os::raw::c_uint = 1;
pub const _SYS_UIO_H: ::std::os::raw::c_uint = 1;
pub const _BITS_UIO_H: ::std::os::raw::c_uint = 1;
pub const UIO_MAXIOV: ::std::os::raw::c_uint = 1024;
pub const PF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const PF_LOCAL: ::std::os::raw::c_uint = 1;
pub const PF_UNIX: ::std::os::raw::c_uint = 1;
pub const PF_FILE: ::std::os::raw::c_uint = 1;
pub const PF_INET: ::std::os::raw::c_uint = 2;
pub const PF_AX25: ::std::os::raw::c_uint = 3;
pub const PF_IPX: ::std::os::raw::c_uint = 4;
pub const PF_APPLETALK: ::std::os::raw::c_uint = 5;
pub const PF_NETROM: ::std::os::raw::c_uint = 6;
pub const PF_BRIDGE: ::std::os::raw::c_uint = 7;
pub const PF_ATMPVC: ::std::os::raw::c_uint = 8;
pub const PF_X25: ::std::os::raw::c_uint = 9;
pub const PF_INET6: ::std::os::raw::c_uint = 10;
pub const PF_ROSE: ::std::os::raw::c_uint = 11;
pub const PF_DECnet: ::std::os::raw::c_uint = 12;
pub const PF_NETBEUI: ::std::os::raw::c_uint = 13;
pub const PF_SECURITY: ::std::os::raw::c_uint = 14;
pub const PF_KEY: ::std::os::raw::c_uint = 15;
pub const PF_NETLINK: ::std::os::raw::c_uint = 16;
pub const PF_ROUTE: ::std::os::raw::c_uint = 16;
pub const PF_PACKET: ::std::os::raw::c_uint = 17;
pub const PF_ASH: ::std::os::raw::c_uint = 18;
pub const PF_ECONET: ::std::os::raw::c_uint = 19;
pub const PF_ATMSVC: ::std::os::raw::c_uint = 20;
pub const PF_RDS: ::std::os::raw::c_uint = 21;
pub const PF_SNA: ::std::os::raw::c_uint = 22;
pub const PF_IRDA: ::std::os::raw::c_uint = 23;
pub const PF_PPPOX: ::std::os::raw::c_uint = 24;
pub const PF_WANPIPE: ::std::os::raw::c_uint = 25;
pub const PF_LLC: ::std::os::raw::c_uint = 26;
pub const PF_IB: ::std::os::raw::c_uint = 27;
pub const PF_MPLS: ::std::os::raw::c_uint = 28;
pub const PF_CAN: ::std::os::raw::c_uint = 29;
pub const PF_TIPC: ::std::os::raw::c_uint = 30;
pub const PF_BLUETOOTH: ::std::os::raw::c_uint = 31;
pub const PF_IUCV: ::std::os::raw::c_uint = 32;
pub const PF_RXRPC: ::std::os::raw::c_uint = 33;
pub const PF_ISDN: ::std::os::raw::c_uint = 34;
pub const PF_PHONET: ::std::os::raw::c_uint = 35;
pub const PF_IEEE802154: ::std::os::raw::c_uint = 36;
pub const PF_CAIF: ::std::os::raw::c_uint = 37;
pub const PF_ALG: ::std::os::raw::c_uint = 38;
pub const PF_NFC: ::std::os::raw::c_uint = 39;
pub const PF_VSOCK: ::std::os::raw::c_uint = 40;
pub const PF_MAX: ::std::os::raw::c_uint = 41;
pub const AF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const AF_LOCAL: ::std::os::raw::c_uint = 1;
pub const AF_UNIX: ::std::os::raw::c_uint = 1;
pub const AF_FILE: ::std::os::raw::c_uint = 1;
pub const AF_INET: ::std::os::raw::c_uint = 2;
pub const AF_AX25: ::std::os::raw::c_uint = 3;
pub const AF_IPX: ::std::os::raw::c_uint = 4;
pub const AF_APPLETALK: ::std::os::raw::c_uint = 5;
pub const AF_NETROM: ::std::os::raw::c_uint = 6;
pub const AF_BRIDGE: ::std::os::raw::c_uint = 7;
pub const AF_ATMPVC: ::std::os::raw::c_uint = 8;
pub const AF_X25: ::std::os::raw::c_uint = 9;
pub const AF_INET6: ::std::os::raw::c_uint = 10;
pub const AF_ROSE: ::std::os::raw::c_uint = 11;
pub const AF_DECnet: ::std::os::raw::c_uint = 12;
pub const AF_NETBEUI: ::std::os::raw::c_uint = 13;
pub const AF_SECURITY: ::std::os::raw::c_uint = 14;
pub const AF_KEY: ::std::os::raw::c_uint = 15;
pub const AF_NETLINK: ::std::os::raw::c_uint = 16;
pub const AF_ROUTE: ::std::os::raw::c_uint = 16;
pub const AF_PACKET: ::std::os::raw::c_uint = 17;
pub const AF_ASH: ::std::os::raw::c_uint = 18;
pub const AF_ECONET: ::std::os::raw::c_uint = 19;
pub const AF_ATMSVC: ::std::os::raw::c_uint = 20;
pub const AF_RDS: ::std::os::raw::c_uint = 21;
pub const AF_SNA: ::std::os::raw::c_uint = 22;
pub const AF_IRDA: ::std::os::raw::c_uint = 23;
pub const AF_PPPOX: ::std::os::raw::c_uint = 24;
pub const AF_WANPIPE: ::std::os::raw::c_uint = 25;
pub const AF_LLC: ::std::os::raw::c_uint = 26;
pub const AF_IB: ::std::os::raw::c_uint = 27;
pub const AF_MPLS: ::std::os::raw::c_uint = 28;
pub const AF_CAN: ::std::os::raw::c_uint = 29;
pub const AF_TIPC: ::std::os::raw::c_uint = 30;
pub const AF_BLUETOOTH: ::std::os::raw::c_uint = 31;
pub const AF_IUCV: ::std::os::raw::c_uint = 32;
pub const AF_RXRPC: ::std::os::raw::c_uint = 33;
pub const AF_ISDN: ::std::os::raw::c_uint = 34;
pub const AF_PHONET: ::std::os::raw::c_uint = 35;
pub const AF_IEEE802154: ::std::os::raw::c_uint = 36;
pub const AF_CAIF: ::std::os::raw::c_uint = 37;
pub const AF_ALG: ::std::os::raw::c_uint = 38;
pub const AF_NFC: ::std::os::raw::c_uint = 39;
pub const AF_VSOCK: ::std::os::raw::c_uint = 40;
pub const AF_MAX: ::std::os::raw::c_uint = 41;
pub const SOL_RAW: ::std::os::raw::c_uint = 255;
pub const SOL_DECNET: ::std::os::raw::c_uint = 261;
pub const SOL_X25: ::std::os::raw::c_uint = 262;
pub const SOL_PACKET: ::std::os::raw::c_uint = 263;
pub const SOL_ATM: ::std::os::raw::c_uint = 264;
pub const SOL_AAL: ::std::os::raw::c_uint = 265;
pub const SOL_IRDA: ::std::os::raw::c_uint = 266;
pub const SOMAXCONN: ::std::os::raw::c_uint = 128;
pub const _BITS_SOCKADDR_H: ::std::os::raw::c_uint = 1;
pub const _SS_SIZE: ::std::os::raw::c_uint = 128;
pub const FIOSETOWN: ::std::os::raw::c_uint = 35073;
pub const SIOCSPGRP: ::std::os::raw::c_uint = 35074;
pub const FIOGETOWN: ::std::os::raw::c_uint = 35075;
pub const SIOCGPGRP: ::std::os::raw::c_uint = 35076;
pub const SIOCATMARK: ::std::os::raw::c_uint = 35077;
pub const SIOCGSTAMP: ::std::os::raw::c_uint = 35078;
pub const SIOCGSTAMPNS: ::std::os::raw::c_uint = 35079;
pub const SOL_SOCKET: ::std::os::raw::c_uint = 1;
pub const SO_DEBUG: ::std::os::raw::c_uint = 1;
pub const SO_REUSEADDR: ::std::os::raw::c_uint = 2;
pub const SO_TYPE: ::std::os::raw::c_uint = 3;
pub const SO_ERROR: ::std::os::raw::c_uint = 4;
pub const SO_DONTROUTE: ::std::os::raw::c_uint = 5;
pub const SO_BROADCAST: ::std::os::raw::c_uint = 6;
pub const SO_SNDBUF: ::std::os::raw::c_uint = 7;
pub const SO_RCVBUF: ::std::os::raw::c_uint = 8;
pub const SO_SNDBUFFORCE: ::std::os::raw::c_uint = 32;
pub const SO_RCVBUFFORCE: ::std::os::raw::c_uint = 33;
pub const SO_KEEPALIVE: ::std::os::raw::c_uint = 9;
pub const SO_OOBINLINE: ::std::os::raw::c_uint = 10;
pub const SO_NO_CHECK: ::std::os::raw::c_uint = 11;
pub const SO_PRIORITY: ::std::os::raw::c_uint = 12;
pub const SO_LINGER: ::std::os::raw::c_uint = 13;
pub const SO_BSDCOMPAT: ::std::os::raw::c_uint = 14;
pub const SO_REUSEPORT: ::std::os::raw::c_uint = 15;
pub const SO_PASSCRED: ::std::os::raw::c_uint = 16;
pub const SO_PEERCRED: ::std::os::raw::c_uint = 17;
pub const SO_RCVLOWAT: ::std::os::raw::c_uint = 18;
pub const SO_SNDLOWAT: ::std::os::raw::c_uint = 19;
pub const SO_RCVTIMEO: ::std::os::raw::c_uint = 20;
pub const SO_SNDTIMEO: ::std::os::raw::c_uint = 21;
pub const SO_SECURITY_AUTHENTICATION: ::std::os::raw::c_uint = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: ::std::os::raw::c_uint = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: ::std::os::raw::c_uint = 24;
pub const SO_BINDTODEVICE: ::std::os::raw::c_uint = 25;
pub const SO_ATTACH_FILTER: ::std::os::raw::c_uint = 26;
pub const SO_DETACH_FILTER: ::std::os::raw::c_uint = 27;
pub const SO_GET_FILTER: ::std::os::raw::c_uint = 26;
pub const SO_PEERNAME: ::std::os::raw::c_uint = 28;
pub const SO_TIMESTAMP: ::std::os::raw::c_uint = 29;
pub const SCM_TIMESTAMP: ::std::os::raw::c_uint = 29;
pub const SO_ACCEPTCONN: ::std::os::raw::c_uint = 30;
pub const SO_PEERSEC: ::std::os::raw::c_uint = 31;
pub const SO_PASSSEC: ::std::os::raw::c_uint = 34;
pub const SO_TIMESTAMPNS: ::std::os::raw::c_uint = 35;
pub const SCM_TIMESTAMPNS: ::std::os::raw::c_uint = 35;
pub const SO_MARK: ::std::os::raw::c_uint = 36;
pub const SO_TIMESTAMPING: ::std::os::raw::c_uint = 37;
pub const SCM_TIMESTAMPING: ::std::os::raw::c_uint = 37;
pub const SO_PROTOCOL: ::std::os::raw::c_uint = 38;
pub const SO_DOMAIN: ::std::os::raw::c_uint = 39;
pub const SO_RXQ_OVFL: ::std::os::raw::c_uint = 40;
pub const SO_WIFI_STATUS: ::std::os::raw::c_uint = 41;
pub const SCM_WIFI_STATUS: ::std::os::raw::c_uint = 41;
pub const SO_PEEK_OFF: ::std::os::raw::c_uint = 42;
pub const SO_NOFCS: ::std::os::raw::c_uint = 43;
pub const SO_LOCK_FILTER: ::std::os::raw::c_uint = 44;
pub const SO_SELECT_ERR_QUEUE: ::std::os::raw::c_uint = 45;
pub const SO_BUSY_POLL: ::std::os::raw::c_uint = 46;
pub const SO_MAX_PACING_RATE: ::std::os::raw::c_uint = 47;
pub const SO_BPF_EXTENSIONS: ::std::os::raw::c_uint = 48;
pub const SO_INCOMING_CPU: ::std::os::raw::c_uint = 49;
pub const SO_ATTACH_BPF: ::std::os::raw::c_uint = 50;
pub const SO_DETACH_BPF: ::std::os::raw::c_uint = 27;
pub const MAXNAMELEN: ::std::os::raw::c_uint = 4096;
pub const WORD_BIT: ::std::os::raw::c_uint = 32;
pub const HAVE_SA_SIGINFO: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGPIPE: ::std::os::raw::c_uint = 1;
pub const HAVE_SIGHUP: ::std::os::raw::c_uint = 1;
pub const HAVE_WAIT_INCLUDES_SIGNAL: ::std::os::raw::c_uint = 1;
pub const HAVE_PR_SET_PDEATHSIG: ::std::os::raw::c_uint = 1;
pub const _LIBGEN_H: ::std::os::raw::c_uint = 1;
pub const HAVE_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 1;
pub const HAVE_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 1;
pub const HAVE___THREAD: ::std::os::raw::c_uint = 1;
pub const HAVE_FNDELAY: ::std::os::raw::c_uint = 1;
pub const HAVE_STRFTIME_z: ::std::os::raw::c_uint = 1;
pub const HAVE_STRERROR_R_PTR: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_TIMESPEC: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_SOCKADDR_UN: ::std::os::raw::c_uint = 1;
pub const HAVE_STRUCT_UCRED: ::std::os::raw::c_uint = 1;
pub const IS_LINUX: ::std::os::raw::c_uint = 1;
pub const O_CLOEXEC: ::std::os::raw::c_uint = 0;
pub const FD_CLOEXEC: ::std::os::raw::c_uint = 0;
pub const PM_VERSION_CURRENT: ::std::os::raw::c_uint = 199434;
pub const FMT_INT64: &'static [u8; 3usize] = b"ld\x00";
pub const FMT_UINT64: &'static [u8; 3usize] = b"lu\x00";
pub const FMT_PID: &'static [u8; 2usize] = b"d\x00";
pub const FMT_PTHREAD: &'static [u8; 3usize] = b"lu\x00";
pub const PMAPI_VERSION_2: ::std::os::raw::c_uint = 2;
pub const PMAPI_VERSION: ::std::os::raw::c_uint = 2;
pub const PM_ID_NULL: ::std::os::raw::c_uint = 4294967295;
pub const PM_INDOM_NULL: ::std::os::raw::c_uint = 4294967295;
pub const PM_IN_NULL: ::std::os::raw::c_uint = 4294967295;
pub const PM_SPACE_BYTE: ::std::os::raw::c_uint = 0;
pub const PM_SPACE_KBYTE: ::std::os::raw::c_uint = 1;
pub const PM_SPACE_MBYTE: ::std::os::raw::c_uint = 2;
pub const PM_SPACE_GBYTE: ::std::os::raw::c_uint = 3;
pub const PM_SPACE_TBYTE: ::std::os::raw::c_uint = 4;
pub const PM_SPACE_PBYTE: ::std::os::raw::c_uint = 5;
pub const PM_SPACE_EBYTE: ::std::os::raw::c_uint = 6;
pub const PM_TIME_NSEC: ::std::os::raw::c_uint = 0;
pub const PM_TIME_USEC: ::std::os::raw::c_uint = 1;
pub const PM_TIME_MSEC: ::std::os::raw::c_uint = 2;
pub const PM_TIME_SEC: ::std::os::raw::c_uint = 3;
pub const PM_TIME_MIN: ::std::os::raw::c_uint = 4;
pub const PM_TIME_HOUR: ::std::os::raw::c_uint = 5;
pub const PM_COUNT_ONE: ::std::os::raw::c_uint = 0;
pub const PM_TYPE_NOSUPPORT: ::std::os::raw::c_int = -1;
pub const PM_TYPE_32: ::std::os::raw::c_uint = 0;
pub const PM_TYPE_U32: ::std::os::raw::c_uint = 1;
pub const PM_TYPE_64: ::std::os::raw::c_uint = 2;
pub const PM_TYPE_U64: ::std::os::raw::c_uint = 3;
pub const PM_TYPE_FLOAT: ::std::os::raw::c_uint = 4;
pub const PM_TYPE_DOUBLE: ::std::os::raw::c_uint = 5;
pub const PM_TYPE_STRING: ::std::os::raw::c_uint = 6;
pub const PM_TYPE_AGGREGATE: ::std::os::raw::c_uint = 7;
pub const PM_TYPE_AGGREGATE_STATIC: ::std::os::raw::c_uint = 8;
pub const PM_TYPE_EVENT: ::std::os::raw::c_uint = 9;
pub const PM_TYPE_HIGHRES_EVENT: ::std::os::raw::c_uint = 10;
pub const PM_TYPE_UNKNOWN: ::std::os::raw::c_uint = 255;
pub const PM_SEM_COUNTER: ::std::os::raw::c_uint = 1;
pub const PM_SEM_INSTANT: ::std::os::raw::c_uint = 3;
pub const PM_SEM_DISCRETE: ::std::os::raw::c_uint = 4;
pub const PM_ERR_BASE2: ::std::os::raw::c_uint = 12345;
pub const PM_ERR_BASE: ::std::os::raw::c_uint = 12345;
pub const PM_ERR_GENERIC: ::std::os::raw::c_int = -12345;
pub const PM_ERR_PMNS: ::std::os::raw::c_int = -12346;
pub const PM_ERR_NOPMNS: ::std::os::raw::c_int = -12347;
pub const PM_ERR_DUPPMNS: ::std::os::raw::c_int = -12348;
pub const PM_ERR_TEXT: ::std::os::raw::c_int = -12349;
pub const PM_ERR_APPVERSION: ::std::os::raw::c_int = -12350;
pub const PM_ERR_VALUE: ::std::os::raw::c_int = -12351;
pub const PM_ERR_TIMEOUT: ::std::os::raw::c_int = -12353;
pub const PM_ERR_NODATA: ::std::os::raw::c_int = -12354;
pub const PM_ERR_RESET: ::std::os::raw::c_int = -12355;
pub const PM_ERR_NAME: ::std::os::raw::c_int = -12357;
pub const PM_ERR_PMID: ::std::os::raw::c_int = -12358;
pub const PM_ERR_INDOM: ::std::os::raw::c_int = -12359;
pub const PM_ERR_INST: ::std::os::raw::c_int = -12360;
pub const PM_ERR_UNIT: ::std::os::raw::c_int = -12361;
pub const PM_ERR_CONV: ::std::os::raw::c_int = -12362;
pub const PM_ERR_TRUNC: ::std::os::raw::c_int = -12363;
pub const PM_ERR_SIGN: ::std::os::raw::c_int = -12364;
pub const PM_ERR_PROFILE: ::std::os::raw::c_int = -12365;
pub const PM_ERR_IPC: ::std::os::raw::c_int = -12366;
pub const PM_ERR_EOF: ::std::os::raw::c_int = -12368;
pub const PM_ERR_NOTHOST: ::std::os::raw::c_int = -12369;
pub const PM_ERR_EOL: ::std::os::raw::c_int = -12370;
pub const PM_ERR_MODE: ::std::os::raw::c_int = -12371;
pub const PM_ERR_LABEL: ::std::os::raw::c_int = -12372;
pub const PM_ERR_LOGREC: ::std::os::raw::c_int = -12373;
pub const PM_ERR_NOTARCHIVE: ::std::os::raw::c_int = -12374;
pub const PM_ERR_LOGFILE: ::std::os::raw::c_int = -12375;
pub const PM_ERR_NOCONTEXT: ::std::os::raw::c_int = -12376;
pub const PM_ERR_PROFILESPEC: ::std::os::raw::c_int = -12377;
pub const PM_ERR_PMID_LOG: ::std::os::raw::c_int = -12378;
pub const PM_ERR_INDOM_LOG: ::std::os::raw::c_int = -12379;
pub const PM_ERR_INST_LOG: ::std::os::raw::c_int = -12380;
pub const PM_ERR_NOPROFILE: ::std::os::raw::c_int = -12381;
pub const PM_ERR_NOAGENT: ::std::os::raw::c_int = -12386;
pub const PM_ERR_PERMISSION: ::std::os::raw::c_int = -12387;
pub const PM_ERR_CONNLIMIT: ::std::os::raw::c_int = -12388;
pub const PM_ERR_AGAIN: ::std::os::raw::c_int = -12389;
pub const PM_ERR_ISCONN: ::std::os::raw::c_int = -12390;
pub const PM_ERR_NOTCONN: ::std::os::raw::c_int = -12391;
pub const PM_ERR_NEEDPORT: ::std::os::raw::c_int = -12392;
pub const PM_ERR_NONLEAF: ::std::os::raw::c_int = -12394;
pub const PM_ERR_TYPE: ::std::os::raw::c_int = -12397;
pub const PM_ERR_THREAD: ::std::os::raw::c_int = -12398;
pub const PM_ERR_NOCONTAINER: ::std::os::raw::c_int = -12399;
pub const PM_ERR_BADSTORE: ::std::os::raw::c_int = -12400;
pub const PM_ERR_LOGOVERLAP: ::std::os::raw::c_int = -12401;
pub const PM_ERR_LOGHOST: ::std::os::raw::c_int = -12402;
pub const PM_ERR_LOGCHANGETYPE: ::std::os::raw::c_int = -12404;
pub const PM_ERR_LOGCHANGESEM: ::std::os::raw::c_int = -12405;
pub const PM_ERR_LOGCHANGEINDOM: ::std::os::raw::c_int = -12406;
pub const PM_ERR_LOGCHANGEUNITS: ::std::os::raw::c_int = -12407;
pub const PM_ERR_NEEDCLIENTCERT: ::std::os::raw::c_int = -12408;
pub const PM_ERR_TOOSMALL: ::std::os::raw::c_int = -12443;
pub const PM_ERR_TOOBIG: ::std::os::raw::c_int = -12444;
pub const PM_ERR_FAULT: ::std::os::raw::c_int = -12445;
pub const PM_ERR_PMDAREADY: ::std::os::raw::c_int = -13393;
pub const PM_ERR_PMDANOTREADY: ::std::os::raw::c_int = -13394;
pub const PM_ERR_NYI: ::std::os::raw::c_int = -21344;
pub const PM_MAXERRMSGLEN: ::std::os::raw::c_uint = 128;
pub const PMNS_LOCAL: ::std::os::raw::c_uint = 1;
pub const PMNS_REMOTE: ::std::os::raw::c_uint = 2;
pub const PMNS_ARCHIVE: ::std::os::raw::c_uint = 3;
pub const PMNS_LEAF_STATUS: ::std::os::raw::c_uint = 0;
pub const PMNS_NONLEAF_STATUS: ::std::os::raw::c_uint = 1;
pub const PM_CONTEXT_UNDEF: ::std::os::raw::c_int = -1;
pub const PM_CONTEXT_HOST: ::std::os::raw::c_uint = 1;
pub const PM_CONTEXT_ARCHIVE: ::std::os::raw::c_uint = 2;
pub const PM_CONTEXT_LOCAL: ::std::os::raw::c_uint = 3;
pub const PM_CONTEXT_TYPEMASK: ::std::os::raw::c_uint = 255;
pub const PM_CTXFLAG_EXCLUSIVE: ::std::os::raw::c_uint = 512;
pub const PM_CTXFLAG_SECURE: ::std::os::raw::c_uint = 1024;
pub const PM_CTXFLAG_COMPRESS: ::std::os::raw::c_uint = 2048;
pub const PM_CTXFLAG_RELAXED: ::std::os::raw::c_uint = 4096;
pub const PM_CTXFLAG_AUTH: ::std::os::raw::c_uint = 8192;
pub const PM_CTXFLAG_CONTAINER: ::std::os::raw::c_uint = 16384;
pub const PM_VAL_HDR_SIZE: ::std::os::raw::c_uint = 4;
pub const PM_VAL_VLEN_MAX: ::std::os::raw::c_uint = 16777215;
pub const PM_VAL_INSITU: ::std::os::raw::c_uint = 0;
pub const PM_VAL_DPTR: ::std::os::raw::c_uint = 1;
pub const PM_VAL_SPTR: ::std::os::raw::c_uint = 2;
pub const PMCD_NO_CHANGE: ::std::os::raw::c_uint = 0;
pub const PMCD_ADD_AGENT: ::std::os::raw::c_uint = 1;
pub const PMCD_RESTART_AGENT: ::std::os::raw::c_uint = 2;
pub const PMCD_DROP_AGENT: ::std::os::raw::c_uint = 4;
pub const PM_TZ_MAXLEN: ::std::os::raw::c_uint = 40;
pub const PM_LOG_MAXHOSTLEN: ::std::os::raw::c_uint = 64;
pub const PM_LOG_MAGIC: ::std::os::raw::c_uint = 1342514688;
pub const PM_LOG_VERS02: ::std::os::raw::c_uint = 2;
pub const PM_LOG_VOL_TI: ::std::os::raw::c_int = -2;
pub const PM_LOG_VOL_META: ::std::os::raw::c_int = -1;
pub const PM_MODE_LIVE: ::std::os::raw::c_uint = 0;
pub const PM_MODE_INTERP: ::std::os::raw::c_uint = 1;
pub const PM_MODE_FORW: ::std::os::raw::c_uint = 2;
pub const PM_MODE_BACK: ::std::os::raw::c_uint = 3;
pub const PM_TEXT_ONELINE: ::std::os::raw::c_uint = 1;
pub const PM_TEXT_HELP: ::std::os::raw::c_uint = 2;
pub const PM_XTB_FLAG: ::std::os::raw::c_uint = 16777216;
pub const PMAPI_OPTIONS: &'static [u8; 29usize] =
    b"A:a:D:gh:n:O:p:S:s:T:t:VZ:z?\x00";
pub const PMLONGOPT_ALIGN: &'static [u8; 6usize] = b"align\x00";
pub const PMLONGOPT_ARCHIVE: &'static [u8; 8usize] = b"archive\x00";
pub const PMLONGOPT_DEBUG: &'static [u8; 6usize] = b"debug\x00";
pub const PMLONGOPT_GUIMODE: &'static [u8; 8usize] = b"guimode\x00";
pub const PMLONGOPT_HOST: &'static [u8; 5usize] = b"host\x00";
pub const PMLONGOPT_HOSTSFILE: &'static [u8; 10usize] = b"hostsfile\x00";
pub const PMLONGOPT_SPECLOCAL: &'static [u8; 11usize] = b"spec-local\x00";
pub const PMLONGOPT_LOCALPMDA: &'static [u8; 11usize] = b"local-PMDA\x00";
pub const PMLONGOPT_NAMESPACE: &'static [u8; 10usize] = b"namespace\x00";
pub const PMLONGOPT_UNIQNAMES: &'static [u8; 10usize] = b"uniqnames\x00";
pub const PMLONGOPT_ORIGIN: &'static [u8; 7usize] = b"origin\x00";
pub const PMLONGOPT_GUIPORT: &'static [u8; 8usize] = b"guiport\x00";
pub const PMLONGOPT_START: &'static [u8; 6usize] = b"start\x00";
pub const PMLONGOPT_SAMPLES: &'static [u8; 8usize] = b"samples\x00";
pub const PMLONGOPT_FINISH: &'static [u8; 7usize] = b"finish\x00";
pub const PMLONGOPT_INTERVAL: &'static [u8; 9usize] = b"interval\x00";
pub const PMLONGOPT_VERSION: &'static [u8; 8usize] = b"version\x00";
pub const PMLONGOPT_TIMEZONE: &'static [u8; 9usize] = b"timezone\x00";
pub const PMLONGOPT_HOSTZONE: &'static [u8; 9usize] = b"hostzone\x00";
pub const PMLONGOPT_HELP: &'static [u8; 5usize] = b"help\x00";
pub const PMLONGOPT_ARCHIVE_LIST: &'static [u8; 13usize] =
    b"archive-list\x00";
pub const PMLONGOPT_ARCHIVE_FOLIO: &'static [u8; 14usize] =
    b"archive-folio\x00";
pub const PMLONGOPT_HOST_LIST: &'static [u8; 10usize] = b"host-list\x00";
pub const PMLONGOPT_CONTAINER: &'static [u8; 10usize] = b"container\x00";
pub const PMLONGOPT_DERIVED: &'static [u8; 8usize] = b"derived\x00";
pub const PM_OPTFLAG_INIT: ::std::os::raw::c_uint = 1;
pub const PM_OPTFLAG_DONE: ::std::os::raw::c_uint = 2;
pub const PM_OPTFLAG_MULTI: ::std::os::raw::c_uint = 4;
pub const PM_OPTFLAG_USAGE_ERR: ::std::os::raw::c_uint = 8;
pub const PM_OPTFLAG_RUNTIME_ERR: ::std::os::raw::c_uint = 16;
pub const PM_OPTFLAG_EXIT: ::std::os::raw::c_uint = 32;
pub const PM_OPTFLAG_POSIX: ::std::os::raw::c_uint = 64;
pub const PM_OPTFLAG_MIXED: ::std::os::raw::c_uint = 128;
pub const PM_OPTFLAG_ENV_ONLY: ::std::os::raw::c_uint = 256;
pub const PM_OPTFLAG_LONG_ONLY: ::std::os::raw::c_uint = 512;
pub const PM_OPTFLAG_BOUNDARIES: ::std::os::raw::c_uint = 1024;
pub const PM_OPTFLAG_STDOUT_TZ: ::std::os::raw::c_uint = 2048;
pub const PM_OPTFLAG_NOFLUSH: ::std::os::raw::c_uint = 4096;
pub const PM_OPTFLAG_QUIET: ::std::os::raw::c_uint = 8192;
pub const PM_EVENT_FLAG_POINT: ::std::os::raw::c_uint = 1;
pub const PM_EVENT_FLAG_START: ::std::os::raw::c_uint = 2;
pub const PM_EVENT_FLAG_END: ::std::os::raw::c_uint = 4;
pub const PM_EVENT_FLAG_ID: ::std::os::raw::c_uint = 8;
pub const PM_EVENT_FLAG_PARENT: ::std::os::raw::c_uint = 16;
pub const PM_EVENT_FLAG_MISSED: ::std::os::raw::c_uint = 2147483648;
pub const PM_SERVER_SERVICE_SPEC: &'static [u8; 5usize] = b"pmcd\x00";
pub const PM_SERVER_PROXY_SPEC: &'static [u8; 8usize] = b"pmproxy\x00";
pub const MMV_NAMEMAX: ::std::os::raw::c_uint = 64;
pub const MMV_STRINGMAX: ::std::os::raw::c_uint = 256;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum idtype_t { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::std::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::std::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait {
    pub w_status: __BindgenUnionField<::std::os::raw::c_int>,
    pub __wait_terminated: __BindgenUnionField<wait__bindgen_ty_1>,
    pub __wait_stopped: __BindgenUnionField<wait__bindgen_ty_2>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: [u16; 2usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_1>() , 4usize , concat !
               ( "Size of: " , stringify ! ( wait__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<wait__bindgen_ty_1>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_1 ) ));
}
impl Clone for wait__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        let mask = 127usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 127usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        let mask = 128usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 7usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 128usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 7usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        let mask = 65280usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 65280usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: [u16; 2usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_2>() , 4usize , concat !
               ( "Size of: " , stringify ! ( wait__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<wait__bindgen_ty_2>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_2 ) ));
}
impl Clone for wait__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        let mask = 255usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 255usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        let mask = 65280usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 65280usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(::std::mem::size_of::<wait>() , 4usize , concat ! (
               "Size of: " , stringify ! ( wait ) ));
    assert_eq! (::std::mem::align_of::<wait>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( wait ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . w_status as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( w_status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . __wait_terminated as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( __wait_terminated ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . __wait_stopped as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( __wait_stopped ) ));
}
impl Clone for wait {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __WAIT_STATUS {
    pub __uptr: __BindgenUnionField<*mut wait>,
    pub __iptr: __BindgenUnionField<*mut ::std::os::raw::c_int>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(::std::mem::size_of::<__WAIT_STATUS>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __WAIT_STATUS ) ));
    assert_eq! (::std::mem::align_of::<__WAIT_STATUS>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __WAIT_STATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __WAIT_STATUS ) ) . __uptr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __WAIT_STATUS ) , "::"
                , stringify ! ( __uptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __WAIT_STATUS ) ) . __iptr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __WAIT_STATUS ) , "::"
                , stringify ! ( __iptr ) ));
}
impl Clone for __WAIT_STATUS {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(::std::mem::size_of::<div_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( div_t ) ));
    assert_eq! (::std::mem::align_of::<div_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( div_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . rem as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for div_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(::std::mem::size_of::<ldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( ldiv_t ) ));
    assert_eq! (::std::mem::align_of::<ldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for ldiv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(::std::mem::size_of::<lldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( lldiv_t ) ));
    assert_eq! (::std::mem::align_of::<lldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for lldiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(::std::mem::size_of::<__sigset_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __sigset_t ) ));
    assert_eq! (::std::mem::align_of::<__sigset_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigset_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigset_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __sigset_t {
    fn clone(&self) -> Self { *self }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timespec ) ));
    assert_eq! (::std::mem::align_of::<timespec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timeval ) ));
    assert_eq! (::std::mem::align_of::<timeval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::std::mem::size_of::<fd_set>() , 128usize , concat ! (
               "Size of: " , stringify ! ( fd_set ) ));
    assert_eq! (::std::mem::align_of::<fd_set>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( fd_set ) , "::" ,
                stringify ! ( __fds_bits ) ));
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_attr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 56usize , concat ! (
               "Size of: " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_attr_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (::std::mem::align_of::<__pthread_internal_list>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __prev as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __prev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __next as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __next ) ));
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t {
    pub __data: __BindgenUnionField<pthread_mutex_t___pthread_mutex_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 40usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>() ,
               40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t___pthread_mutex_s )
               ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __lock as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __count as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __owner as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __owner ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __nusers as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __nusers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __kind as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __kind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __spins as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __spins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __elision as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __elision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __list as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __list ) ));
}
impl Clone for pthread_mutex_t___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t>() , 40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_mutexattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutexattr_t>() , 4usize , concat
               ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutexattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t {
    pub __data: __BindgenUnionField<pthread_cond_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 48usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>() , 48usize
               , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __lock
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __futex as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __futex
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __total_seq as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __total_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __wakeup_seq as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __wakeup_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __woken_seq as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __woken_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __mutex as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __mutex
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __nwaiters as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nwaiters ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __broadcast_seq as * const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __broadcast_seq ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t>() , 48usize , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_condattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_condattr_t>() , 4usize , concat !
               ( "Size of: " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_condattr_t>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t {
    pub __data: __BindgenUnionField<pthread_rwlock_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>() ,
               56usize , concat ! (
               "Size of: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_rwlock_t__bindgen_ty_1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __lock as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __nr_readers as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nr_readers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __readers_wakeup as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __readers_wakeup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writer_wakeup as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writer_wakeup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __nr_readers_queued as * const _ as usize } , 16usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nr_readers_queued ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __nr_writers_queued as * const _ as usize } , 20usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nr_writers_queued ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writer as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __shared as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __shared ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __rwelision as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __rwelision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad1 as * const _ as usize } , 33usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad2 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __flags as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __flags ) ));
}
impl Clone for pthread_rwlock_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t>() , 56usize , concat !
               ( "Size of: " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_rwlockattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlockattr_t>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlockattr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrier_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 32usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrier_t>() , 32usize , concat !
               ( "Size of: " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_barrier_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrier_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pthread_barrierattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrierattr_t>() , 4usize ,
               concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t )
               ));
    assert_eq! (::std::mem::align_of::<pthread_barrierattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_barrierattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrierattr_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::std::mem::size_of::<random_data>() , 48usize , concat ! (
               "Size of: " , stringify ! ( random_data ) ));
    assert_eq! (::std::mem::align_of::<random_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( random_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . fptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( fptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rptr as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . state as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_type as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_deg as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_deg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_sep as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_sep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . end_ptr as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( end_ptr ) ));
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::std::mem::size_of::<drand48_data>() , 24usize , concat ! (
               "Size of: " , stringify ! ( drand48_data ) ));
    assert_eq! (::std::mem::align_of::<drand48_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( drand48_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __old_x as * const _
                as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __old_x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __c as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __init as * const _ as
                usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __init ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __a as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __a ) ));
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize , concat ! (
               "Size of: " , stringify ! ( _IO_FILE ) ));
    assert_eq! (::std::mem::align_of::<_IO_FILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_FILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_ptr as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_end as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_base as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_base as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_ptr as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_end as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_base as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_end as * const _
                as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_base as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_backup_base as * const
                _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_backup_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_end as * const _
                as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _markers as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _markers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _chain as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _chain ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _fileno as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _fileno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags2 as * const _ as
                usize } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _old_offset as * const _
                as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _old_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _cur_column as * const _
                as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _cur_column ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _vtable_offset as * const
                _ as usize } , 130usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _vtable_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _shortbuf as * const _ as
                usize } , 131usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _shortbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _lock as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _offset as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad1 as * const _ as
                usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad2 as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad3 as * const _ as
                usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad4 as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad5 as * const _ as
                usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _mode as * const _ as
                usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _unused2 as * const _ as
                usize } , 196usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _unused2 ) ));
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t__bindgen_ty_1 {
    pub __wch: __BindgenUnionField<::std::os::raw::c_uint>,
    pub __wchb: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wch as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wchb as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb )
                ));
}
impl Clone for __mbstate_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __count as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __value as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __value ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(::std::mem::size_of::<_G_fpos_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (::std::mem::align_of::<_G_fpos_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(::std::mem::size_of::<_G_fpos64_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (::std::mem::align_of::<_G_fpos64_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos64_t {
    fn clone(&self) -> Self { *self }
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize , concat ! (
               "Size of: " , stringify ! ( _IO_marker ) ));
    assert_eq! (::std::mem::align_of::<_IO_marker>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_marker ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _sbuf as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _pos as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _pos ) ));
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *mut __va_list_tag,
                       arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(__name: *const ::std::os::raw::c_char,
                  __type: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(__fd: ::std::os::raw::c_int,
                     __file: *const ::std::os::raw::c_char,
                     __type: ::std::os::raw::c_int,
                     __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(__fd: ::std::os::raw::c_int, __offset: __off_t,
                 __whence: ::std::os::raw::c_int) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __nbytes: usize) -> isize;
}
extern "C" {
    pub fn write(__fd: ::std::os::raw::c_int,
                 __buf: *const ::std::os::raw::c_void, __n: usize) -> isize;
}
extern "C" {
    pub fn pread(__fd: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_void, __nbytes: usize,
                 __offset: __off_t) -> isize;
}
extern "C" {
    pub fn pwrite(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: usize,
                  __offset: __off_t) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t)
     -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(__file: *const ::std::os::raw::c_char, __owner: __uid_t,
                 __group: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(__fd: ::std::os::raw::c_int, __owner: __uid_t,
                  __group: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(__file: *const ::std::os::raw::c_char, __owner: __uid_t,
                  __group: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(__fd: ::std::os::raw::c_int,
                    __file: *const ::std::os::raw::c_char, __owner: __uid_t,
                    __group: __gid_t, __flag: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__environ"]
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(__path: *const ::std::os::raw::c_char,
                  __argv: *const *const ::std::os::raw::c_char,
                  __envp: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(__fd: ::std::os::raw::c_int,
                   __argv: *const *const ::std::os::raw::c_char,
                   __envp: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(__path: *const ::std::os::raw::c_char,
                 __argv: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(__path: *const ::std::os::raw::c_char,
                  __arg: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(__path: *const ::std::os::raw::c_char,
                 __arg: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(__file: *const ::std::os::raw::c_char,
                  __argv: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(__file: *const ::std::os::raw::c_char,
                  __arg: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_LINK_MAX;
pub const _PC_MAX_CANON: _bindgen_ty_1 = _bindgen_ty_1::_PC_MAX_CANON;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = _bindgen_ty_1::_PC_MAX_INPUT;
pub const _PC_NAME_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_NAME_MAX;
pub const _PC_PATH_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_PATH_MAX;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = _bindgen_ty_1::_PC_PIPE_BUF;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_CHOWN_RESTRICTED;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = _bindgen_ty_1::_PC_NO_TRUNC;
pub const _PC_VDISABLE: _bindgen_ty_1 = _bindgen_ty_1::_PC_VDISABLE;
pub const _PC_SYNC_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_SYNC_IO;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_ASYNC_IO;
pub const _PC_PRIO_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_PRIO_IO;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = _bindgen_ty_1::_PC_SOCK_MAXBUF;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = _bindgen_ty_1::_PC_FILESIZEBITS;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_REC_INCR_XFER_SIZE;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_REC_MAX_XFER_SIZE;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_REC_MIN_XFER_SIZE;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_REC_XFER_ALIGN;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 =
    _bindgen_ty_1::_PC_ALLOC_SIZE_MIN;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_SYMLINK_MAX;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = _bindgen_ty_1::_PC_2_SYMLINKS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    _PC_LINK_MAX = 0,
    _PC_MAX_CANON = 1,
    _PC_MAX_INPUT = 2,
    _PC_NAME_MAX = 3,
    _PC_PATH_MAX = 4,
    _PC_PIPE_BUF = 5,
    _PC_CHOWN_RESTRICTED = 6,
    _PC_NO_TRUNC = 7,
    _PC_VDISABLE = 8,
    _PC_SYNC_IO = 9,
    _PC_ASYNC_IO = 10,
    _PC_PRIO_IO = 11,
    _PC_SOCK_MAXBUF = 12,
    _PC_FILESIZEBITS = 13,
    _PC_REC_INCR_XFER_SIZE = 14,
    _PC_REC_MAX_XFER_SIZE = 15,
    _PC_REC_MIN_XFER_SIZE = 16,
    _PC_REC_XFER_ALIGN = 17,
    _PC_ALLOC_SIZE_MIN = 18,
    _PC_SYMLINK_MAX = 19,
    _PC_2_SYMLINKS = 20,
}
pub const _SC_ARG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ARG_MAX;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHILD_MAX;
pub const _SC_CLK_TCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_CLK_TCK;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NGROUPS_MAX;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_OPEN_MAX;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_STREAM_MAX;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TZNAME_MAX;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = _bindgen_ty_2::_SC_JOB_CONTROL;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SAVED_IDS;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_REALTIME_SIGNALS;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_PRIORITY_SCHEDULING;
pub const _SC_TIMERS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMERS;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_ASYNCHRONOUS_IO;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_PRIORITIZED_IO;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SYNCHRONIZED_IO;
pub const _SC_FSYNC: _bindgen_ty_2 = _bindgen_ty_2::_SC_FSYNC;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = _bindgen_ty_2::_SC_MAPPED_FILES;
pub const _SC_MEMLOCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMLOCK;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMLOCK_RANGE;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_MEMORY_PROTECTION;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_MESSAGE_PASSING;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEMAPHORES;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SHARED_MEMORY_OBJECTS;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_AIO_LISTIO_MAX;
pub const _SC_AIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_AIO_MAX;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_AIO_PRIO_DELTA_MAX;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_DELAYTIMER_MAX;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MQ_OPEN_MAX;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MQ_PRIO_MAX;
pub const _SC_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_VERSION;
pub const _SC_PAGESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_PAGESIZE;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_RTSIG_MAX;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEM_NSEMS_MAX;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEM_VALUE_MAX;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SIGQUEUE_MAX;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMER_MAX;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_BASE_MAX;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_DIM_MAX;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_SCALE_MAX;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_STRING_MAX;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_COLL_WEIGHTS_MAX;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_EQUIV_CLASS_MAX;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_EXPR_NEST_MAX;
pub const _SC_LINE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_LINE_MAX;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_RE_DUP_MAX;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_CHARCLASS_NAME_MAX;
pub const _SC_2_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_VERSION;
pub const _SC_2_C_BIND: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_BIND;
pub const _SC_2_C_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_DEV;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_FORT_DEV;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_FORT_RUN;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_SW_DEV;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_LOCALEDEF;
pub const _SC_PII: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII;
pub const _SC_PII_XTI: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_XTI;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_SOCKET;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_INTERNET;
pub const _SC_PII_OSI: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI;
pub const _SC_POLL: _bindgen_ty_2 = _bindgen_ty_2::_SC_POLL;
pub const _SC_SELECT: _bindgen_ty_2 = _bindgen_ty_2::_SC_SELECT;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = _bindgen_ty_2::_SC_UIO_MAXIOV;
pub const _SC_IOV_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UIO_MAXIOV;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_PII_INTERNET_STREAM;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_PII_INTERNET_DGRAM;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_COTS;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_CLTS;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_M;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_T_IOV_MAX;
pub const _SC_THREADS: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREADS;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_SAFE_FUNCTIONS;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_GETGR_R_SIZE_MAX;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_GETPW_R_SIZE_MAX;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LOGIN_NAME_MAX;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TTY_NAME_MAX;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_DESTRUCTOR_ITERATIONS;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_KEYS_MAX;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_STACK_MIN;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_THREADS_MAX;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ATTR_STACKADDR;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ATTR_STACKSIZE;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PRIORITY_SCHEDULING;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PRIO_INHERIT;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PRIO_PROTECT;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PROCESS_SHARED;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_NPROCESSORS_CONF;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_NPROCESSORS_ONLN;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = _bindgen_ty_2::_SC_PHYS_PAGES;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = _bindgen_ty_2::_SC_AVPHYS_PAGES;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ATEXIT_MAX;
pub const _SC_PASS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_PASS_MAX;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_VERSION;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XOPEN_XCU_VERSION;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_UNIX;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_CRYPT;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XOPEN_ENH_I18N;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_SHM;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_CHAR_TERM;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_VERSION;
pub const _SC_2_UPE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_UPE;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG2;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG3;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG4;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_BIT;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_MAX;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_MIN;
pub const _SC_INT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_INT_MAX;
pub const _SC_INT_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_INT_MIN;
pub const _SC_LONG_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_LONG_BIT;
pub const _SC_WORD_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_WORD_BIT;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MB_LEN_MAX;
pub const _SC_NZERO: _bindgen_ty_2 = _bindgen_ty_2::_SC_NZERO;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SSIZE_MAX;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SCHAR_MAX;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SCHAR_MIN;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHRT_MAX;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHRT_MIN;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UCHAR_MAX;
pub const _SC_UINT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UINT_MAX;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ULONG_MAX;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_USHRT_MAX;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_ARGMAX;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_LANGMAX;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_MSGMAX;
pub const _SC_NL_NMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_NMAX;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_SETMAX;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_TEXTMAX;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XBS5_ILP32_OFF32;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XBS5_ILP32_OFFBIG;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XBS5_LP64_OFF64;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XBS5_LPBIG_OFFBIG;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_LEGACY;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XOPEN_REALTIME;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_XOPEN_REALTIME_THREADS;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = _bindgen_ty_2::_SC_ADVISORY_INFO;
pub const _SC_BARRIERS: _bindgen_ty_2 = _bindgen_ty_2::_SC_BARRIERS;
pub const _SC_BASE: _bindgen_ty_2 = _bindgen_ty_2::_SC_BASE;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_C_LANG_SUPPORT;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_C_LANG_SUPPORT_R;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_CLOCK_SELECTION;
pub const _SC_CPUTIME: _bindgen_ty_2 = _bindgen_ty_2::_SC_CPUTIME;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_CPUTIME;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_DEVICE_IO;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_DEVICE_SPECIFIC;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_DEVICE_SPECIFIC_R;
pub const _SC_FD_MGMT: _bindgen_ty_2 = _bindgen_ty_2::_SC_FD_MGMT;
pub const _SC_FIFO: _bindgen_ty_2 = _bindgen_ty_2::_SC_FIFO;
pub const _SC_PIPE: _bindgen_ty_2 = _bindgen_ty_2::_SC_PIPE;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_FILE_ATTRIBUTES;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_LOCKING;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_SYSTEM;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_MONOTONIC_CLOCK;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = _bindgen_ty_2::_SC_MULTI_PROCESS;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SINGLE_PROCESS;
pub const _SC_NETWORKING: _bindgen_ty_2 = _bindgen_ty_2::_SC_NETWORKING;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_READER_WRITER_LOCKS;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPIN_LOCKS;
pub const _SC_REGEXP: _bindgen_ty_2 = _bindgen_ty_2::_SC_REGEXP;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_REGEX_VERSION;
pub const _SC_SHELL: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHELL;
pub const _SC_SIGNALS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SIGNALS;
pub const _SC_SPAWN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPAWN;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SPORADIC_SERVER;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_SPORADIC_SERVER;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SYSTEM_DATABASE;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_SYSTEM_DATABASE_R;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMEOUTS;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TYPED_MEMORY_OBJECTS;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = _bindgen_ty_2::_SC_USER_GROUPS;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_USER_GROUPS_R;
pub const _SC_2_PBS: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_2_PBS_ACCOUNTING;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_LOCATE;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_MESSAGE;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_TRACK;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYMLOOP_MAX;
pub const _SC_STREAMS: _bindgen_ty_2 = _bindgen_ty_2::_SC_STREAMS;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_2_PBS_CHECKPOINT;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V6_ILP32_OFF32;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V6_ILP32_OFFBIG;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_LP64_OFF64;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V6_LPBIG_OFFBIG;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_HOST_NAME_MAX;
pub const _SC_TRACE: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TRACE_EVENT_FILTER;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_INHERIT;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_LOG;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_ICACHE_SIZE;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_ICACHE_ASSOC;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_ICACHE_LINESIZE;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_DCACHE_SIZE;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_DCACHE_ASSOC;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL1_DCACHE_LINESIZE;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL2_CACHE_SIZE;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL2_CACHE_ASSOC;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL2_CACHE_LINESIZE;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL3_CACHE_SIZE;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL3_CACHE_ASSOC;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL3_CACHE_LINESIZE;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL4_CACHE_SIZE;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL4_CACHE_ASSOC;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_LEVEL4_CACHE_LINESIZE;
pub const _SC_IPV6: _bindgen_ty_2 = _bindgen_ty_2::_SC_IPV6;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = _bindgen_ty_2::_SC_RAW_SOCKETS;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V7_ILP32_OFF32;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V7_ILP32_OFFBIG;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_LP64_OFF64;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_V7_LPBIG_OFFBIG;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SS_REPL_MAX;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TRACE_EVENT_NAME_MAX;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TRACE_NAME_MAX;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_SYS_MAX;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_TRACE_USER_EVENT_MAX;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_STREAMS;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ROBUST_PRIO_INHERIT;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ROBUST_PRIO_PROTECT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    _SC_ARG_MAX = 0,
    _SC_CHILD_MAX = 1,
    _SC_CLK_TCK = 2,
    _SC_NGROUPS_MAX = 3,
    _SC_OPEN_MAX = 4,
    _SC_STREAM_MAX = 5,
    _SC_TZNAME_MAX = 6,
    _SC_JOB_CONTROL = 7,
    _SC_SAVED_IDS = 8,
    _SC_REALTIME_SIGNALS = 9,
    _SC_PRIORITY_SCHEDULING = 10,
    _SC_TIMERS = 11,
    _SC_ASYNCHRONOUS_IO = 12,
    _SC_PRIORITIZED_IO = 13,
    _SC_SYNCHRONIZED_IO = 14,
    _SC_FSYNC = 15,
    _SC_MAPPED_FILES = 16,
    _SC_MEMLOCK = 17,
    _SC_MEMLOCK_RANGE = 18,
    _SC_MEMORY_PROTECTION = 19,
    _SC_MESSAGE_PASSING = 20,
    _SC_SEMAPHORES = 21,
    _SC_SHARED_MEMORY_OBJECTS = 22,
    _SC_AIO_LISTIO_MAX = 23,
    _SC_AIO_MAX = 24,
    _SC_AIO_PRIO_DELTA_MAX = 25,
    _SC_DELAYTIMER_MAX = 26,
    _SC_MQ_OPEN_MAX = 27,
    _SC_MQ_PRIO_MAX = 28,
    _SC_VERSION = 29,
    _SC_PAGESIZE = 30,
    _SC_RTSIG_MAX = 31,
    _SC_SEM_NSEMS_MAX = 32,
    _SC_SEM_VALUE_MAX = 33,
    _SC_SIGQUEUE_MAX = 34,
    _SC_TIMER_MAX = 35,
    _SC_BC_BASE_MAX = 36,
    _SC_BC_DIM_MAX = 37,
    _SC_BC_SCALE_MAX = 38,
    _SC_BC_STRING_MAX = 39,
    _SC_COLL_WEIGHTS_MAX = 40,
    _SC_EQUIV_CLASS_MAX = 41,
    _SC_EXPR_NEST_MAX = 42,
    _SC_LINE_MAX = 43,
    _SC_RE_DUP_MAX = 44,
    _SC_CHARCLASS_NAME_MAX = 45,
    _SC_2_VERSION = 46,
    _SC_2_C_BIND = 47,
    _SC_2_C_DEV = 48,
    _SC_2_FORT_DEV = 49,
    _SC_2_FORT_RUN = 50,
    _SC_2_SW_DEV = 51,
    _SC_2_LOCALEDEF = 52,
    _SC_PII = 53,
    _SC_PII_XTI = 54,
    _SC_PII_SOCKET = 55,
    _SC_PII_INTERNET = 56,
    _SC_PII_OSI = 57,
    _SC_POLL = 58,
    _SC_SELECT = 59,
    _SC_UIO_MAXIOV = 60,
    _SC_PII_INTERNET_STREAM = 61,
    _SC_PII_INTERNET_DGRAM = 62,
    _SC_PII_OSI_COTS = 63,
    _SC_PII_OSI_CLTS = 64,
    _SC_PII_OSI_M = 65,
    _SC_T_IOV_MAX = 66,
    _SC_THREADS = 67,
    _SC_THREAD_SAFE_FUNCTIONS = 68,
    _SC_GETGR_R_SIZE_MAX = 69,
    _SC_GETPW_R_SIZE_MAX = 70,
    _SC_LOGIN_NAME_MAX = 71,
    _SC_TTY_NAME_MAX = 72,
    _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
    _SC_THREAD_KEYS_MAX = 74,
    _SC_THREAD_STACK_MIN = 75,
    _SC_THREAD_THREADS_MAX = 76,
    _SC_THREAD_ATTR_STACKADDR = 77,
    _SC_THREAD_ATTR_STACKSIZE = 78,
    _SC_THREAD_PRIORITY_SCHEDULING = 79,
    _SC_THREAD_PRIO_INHERIT = 80,
    _SC_THREAD_PRIO_PROTECT = 81,
    _SC_THREAD_PROCESS_SHARED = 82,
    _SC_NPROCESSORS_CONF = 83,
    _SC_NPROCESSORS_ONLN = 84,
    _SC_PHYS_PAGES = 85,
    _SC_AVPHYS_PAGES = 86,
    _SC_ATEXIT_MAX = 87,
    _SC_PASS_MAX = 88,
    _SC_XOPEN_VERSION = 89,
    _SC_XOPEN_XCU_VERSION = 90,
    _SC_XOPEN_UNIX = 91,
    _SC_XOPEN_CRYPT = 92,
    _SC_XOPEN_ENH_I18N = 93,
    _SC_XOPEN_SHM = 94,
    _SC_2_CHAR_TERM = 95,
    _SC_2_C_VERSION = 96,
    _SC_2_UPE = 97,
    _SC_XOPEN_XPG2 = 98,
    _SC_XOPEN_XPG3 = 99,
    _SC_XOPEN_XPG4 = 100,
    _SC_CHAR_BIT = 101,
    _SC_CHAR_MAX = 102,
    _SC_CHAR_MIN = 103,
    _SC_INT_MAX = 104,
    _SC_INT_MIN = 105,
    _SC_LONG_BIT = 106,
    _SC_WORD_BIT = 107,
    _SC_MB_LEN_MAX = 108,
    _SC_NZERO = 109,
    _SC_SSIZE_MAX = 110,
    _SC_SCHAR_MAX = 111,
    _SC_SCHAR_MIN = 112,
    _SC_SHRT_MAX = 113,
    _SC_SHRT_MIN = 114,
    _SC_UCHAR_MAX = 115,
    _SC_UINT_MAX = 116,
    _SC_ULONG_MAX = 117,
    _SC_USHRT_MAX = 118,
    _SC_NL_ARGMAX = 119,
    _SC_NL_LANGMAX = 120,
    _SC_NL_MSGMAX = 121,
    _SC_NL_NMAX = 122,
    _SC_NL_SETMAX = 123,
    _SC_NL_TEXTMAX = 124,
    _SC_XBS5_ILP32_OFF32 = 125,
    _SC_XBS5_ILP32_OFFBIG = 126,
    _SC_XBS5_LP64_OFF64 = 127,
    _SC_XBS5_LPBIG_OFFBIG = 128,
    _SC_XOPEN_LEGACY = 129,
    _SC_XOPEN_REALTIME = 130,
    _SC_XOPEN_REALTIME_THREADS = 131,
    _SC_ADVISORY_INFO = 132,
    _SC_BARRIERS = 133,
    _SC_BASE = 134,
    _SC_C_LANG_SUPPORT = 135,
    _SC_C_LANG_SUPPORT_R = 136,
    _SC_CLOCK_SELECTION = 137,
    _SC_CPUTIME = 138,
    _SC_THREAD_CPUTIME = 139,
    _SC_DEVICE_IO = 140,
    _SC_DEVICE_SPECIFIC = 141,
    _SC_DEVICE_SPECIFIC_R = 142,
    _SC_FD_MGMT = 143,
    _SC_FIFO = 144,
    _SC_PIPE = 145,
    _SC_FILE_ATTRIBUTES = 146,
    _SC_FILE_LOCKING = 147,
    _SC_FILE_SYSTEM = 148,
    _SC_MONOTONIC_CLOCK = 149,
    _SC_MULTI_PROCESS = 150,
    _SC_SINGLE_PROCESS = 151,
    _SC_NETWORKING = 152,
    _SC_READER_WRITER_LOCKS = 153,
    _SC_SPIN_LOCKS = 154,
    _SC_REGEXP = 155,
    _SC_REGEX_VERSION = 156,
    _SC_SHELL = 157,
    _SC_SIGNALS = 158,
    _SC_SPAWN = 159,
    _SC_SPORADIC_SERVER = 160,
    _SC_THREAD_SPORADIC_SERVER = 161,
    _SC_SYSTEM_DATABASE = 162,
    _SC_SYSTEM_DATABASE_R = 163,
    _SC_TIMEOUTS = 164,
    _SC_TYPED_MEMORY_OBJECTS = 165,
    _SC_USER_GROUPS = 166,
    _SC_USER_GROUPS_R = 167,
    _SC_2_PBS = 168,
    _SC_2_PBS_ACCOUNTING = 169,
    _SC_2_PBS_LOCATE = 170,
    _SC_2_PBS_MESSAGE = 171,
    _SC_2_PBS_TRACK = 172,
    _SC_SYMLOOP_MAX = 173,
    _SC_STREAMS = 174,
    _SC_2_PBS_CHECKPOINT = 175,
    _SC_V6_ILP32_OFF32 = 176,
    _SC_V6_ILP32_OFFBIG = 177,
    _SC_V6_LP64_OFF64 = 178,
    _SC_V6_LPBIG_OFFBIG = 179,
    _SC_HOST_NAME_MAX = 180,
    _SC_TRACE = 181,
    _SC_TRACE_EVENT_FILTER = 182,
    _SC_TRACE_INHERIT = 183,
    _SC_TRACE_LOG = 184,
    _SC_LEVEL1_ICACHE_SIZE = 185,
    _SC_LEVEL1_ICACHE_ASSOC = 186,
    _SC_LEVEL1_ICACHE_LINESIZE = 187,
    _SC_LEVEL1_DCACHE_SIZE = 188,
    _SC_LEVEL1_DCACHE_ASSOC = 189,
    _SC_LEVEL1_DCACHE_LINESIZE = 190,
    _SC_LEVEL2_CACHE_SIZE = 191,
    _SC_LEVEL2_CACHE_ASSOC = 192,
    _SC_LEVEL2_CACHE_LINESIZE = 193,
    _SC_LEVEL3_CACHE_SIZE = 194,
    _SC_LEVEL3_CACHE_ASSOC = 195,
    _SC_LEVEL3_CACHE_LINESIZE = 196,
    _SC_LEVEL4_CACHE_SIZE = 197,
    _SC_LEVEL4_CACHE_ASSOC = 198,
    _SC_LEVEL4_CACHE_LINESIZE = 199,
    _SC_IPV6 = 235,
    _SC_RAW_SOCKETS = 236,
    _SC_V7_ILP32_OFF32 = 237,
    _SC_V7_ILP32_OFFBIG = 238,
    _SC_V7_LP64_OFF64 = 239,
    _SC_V7_LPBIG_OFFBIG = 240,
    _SC_SS_REPL_MAX = 241,
    _SC_TRACE_EVENT_NAME_MAX = 242,
    _SC_TRACE_NAME_MAX = 243,
    _SC_TRACE_SYS_MAX = 244,
    _SC_TRACE_USER_EVENT_MAX = 245,
    _SC_XOPEN_STREAMS = 246,
    _SC_THREAD_ROBUST_PRIO_INHERIT = 247,
    _SC_THREAD_ROBUST_PRIO_PROTECT = 248,
}
pub const _CS_PATH: _bindgen_ty_3 = _bindgen_ty_3::_CS_PATH;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_V6_WIDTH_RESTRICTED_ENVS;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_GNU_LIBC_VERSION;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_GNU_LIBPTHREAD_VERSION;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_V5_WIDTH_RESTRICTED_ENVS;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_V7_WIDTH_RESTRICTED_ENVS;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_CFLAGS;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LDFLAGS;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LIBS;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LINTFLAGS;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_CFLAGS;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LDFLAGS;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LIBS;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_LFS64_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_CFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LDFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LIBS;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_CFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LDFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LIBS;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_CFLAGS;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LDFLAGS;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LIBS;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LINTFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_CFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LIBS;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LIBS;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LIBS;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_V6_ENV: _bindgen_ty_3 = _bindgen_ty_3::_CS_V6_ENV;
pub const _CS_V7_ENV: _bindgen_ty_3 = _bindgen_ty_3::_CS_V7_ENV;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    _CS_PATH = 0,
    _CS_V6_WIDTH_RESTRICTED_ENVS = 1,
    _CS_GNU_LIBC_VERSION = 2,
    _CS_GNU_LIBPTHREAD_VERSION = 3,
    _CS_V5_WIDTH_RESTRICTED_ENVS = 4,
    _CS_V7_WIDTH_RESTRICTED_ENVS = 5,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS = 1001,
    _CS_LFS_LIBS = 1002,
    _CS_LFS_LINTFLAGS = 1003,
    _CS_LFS64_CFLAGS = 1004,
    _CS_LFS64_LDFLAGS = 1005,
    _CS_LFS64_LIBS = 1006,
    _CS_LFS64_LINTFLAGS = 1007,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,
    _CS_XBS5_ILP32_OFF32_LIBS = 1102,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,
    _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,
    _CS_XBS5_LP64_OFF64_CFLAGS = 1108,
    _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,
    _CS_XBS5_LP64_OFF64_LIBS = 1110,
    _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,
    _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,
    _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,
    _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,
    _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,
    _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
    _CS_V6_ENV = 1148,
    _CS_V7_ENV = 1149,
}
extern "C" {
    pub fn pathconf(__path: *const ::std::os::raw::c_char,
                    __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(__fd: ::std::os::raw::c_int,
                     __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(__name: ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(__fd: ::std::os::raw::c_int,
                     __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(__from: *const ::std::os::raw::c_char,
                __to: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(__fromfd: ::std::os::raw::c_int,
                  __from: *const ::std::os::raw::c_char,
                  __tofd: ::std::os::raw::c_int,
                  __to: *const ::std::os::raw::c_char,
                  __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(__from: *const ::std::os::raw::c_char,
                   __to: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(__path: *const ::std::os::raw::c_char,
                    __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> isize;
}
extern "C" {
    pub fn symlinkat(__from: *const ::std::os::raw::c_char,
                     __tofd: ::std::os::raw::c_int,
                     __to: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(__fd: ::std::os::raw::c_int,
                      __path: *const ::std::os::raw::c_char,
                      __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(__fd: ::std::os::raw::c_int,
                    __name: *const ::std::os::raw::c_char,
                    __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(__name: *mut ::std::os::raw::c_char, __name_len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "optarg"]
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "optind"]
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "opterr"]
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "optopt"]
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(___argc: ::std::os::raw::c_int,
                  ___argv: *const *const ::std::os::raw::c_char,
                  __shortopts: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(__name: *const ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(__name: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(__name: *const ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(__sample_buffer: *mut ::std::os::raw::c_ushort,
                  __size: usize, __offset: usize,
                  __scale: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(__nochdir: ::std::os::raw::c_int,
                  __noclose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(__file: *const ::std::os::raw::c_char, __length: __off_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(__fd: ::std::os::raw::c_int, __cmd: ::std::os::raw::c_int,
                 __len: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(::std::mem::size_of::<__locale_struct>() , 232usize , concat !
               ( "Size of: " , stringify ! ( __locale_struct ) ));
    assert_eq! (::std::mem::align_of::<__locale_struct>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( __locale_struct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __locales as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __locales ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_b as *
                const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_tolower as
                * const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_tolower ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_toupper as
                * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_toupper ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __names as * const
                _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __names ) ));
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize,
                     __l: __locale_t) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize)
     -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__xpg_strerror_r"]
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigval {
    pub sival_int: __BindgenUnionField<::std::os::raw::c_int>,
    pub sival_ptr: __BindgenUnionField<*mut ::std::os::raw::c_void>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(::std::mem::size_of::<sigval>() , 8usize , concat ! (
               "Size of: " , stringify ! ( sigval ) ));
    assert_eq! (::std::mem::align_of::<sigval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_int as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_int ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_ptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_ptr ) ));
}
impl Clone for sigval {
    fn clone(&self) -> Self { *self }
}
pub type sigval_t = sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1 {
    pub _pad: __BindgenUnionField<[::std::os::raw::c_int; 28usize]>,
    pub _kill: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_1>,
    pub _timer: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_2>,
    pub _rt: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_3>,
    pub _sigchld: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_4>,
    pub _sigfault: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_5>,
    pub _sigpoll: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_6>,
    pub _sigsys: __BindgenUnionField<siginfo_t__bindgen_ty_1__bindgen_ty_7>,
    pub bindgen_union_field: [u64; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_1 ) )
                . si_pid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_1 ) )
                . si_uid as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                si_uid ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) )
                . si_tid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                si_tid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) )
                . si_overrun as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                si_overrun ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_2 ) )
                . si_sigval as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_2 ) , "::" , stringify ! (
                si_sigval ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) )
                . si_pid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! (
                si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) )
                . si_uid as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! (
                si_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_3 ) )
                . si_sigval as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_3 ) , "::" , stringify ! (
                si_sigval ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()
               , 32usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_pid as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_uid as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_status as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_utime as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_utime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_4 ) )
                . si_stime as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_4 ) , "::" , stringify ! (
                si_stime ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub si_addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ) .
                _lower as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) , "::" ,
                stringify ! ( _lower ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) ) .
                _upper as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 ) , "::" ,
                stringify ! ( _upper ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()
               , 32usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) )
                . si_addr as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! (
                si_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) )
                . si_addr_lsb as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! (
                si_addr_lsb ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_5 ) )
                . si_addr_bnd as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_5 ) , "::" , stringify ! (
                si_addr_bnd ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_6 ) )
                . si_band as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! (
                si_band ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_6 ) )
                . si_fd as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_6 ) , "::" , stringify ! (
                si_fd ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()
               , 16usize , concat ! (
               "Size of: " , stringify ! (
               siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) )
                . _call_addr as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! (
                _call_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) )
                . _syscall as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! (
                _syscall ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1__bindgen_ty_7 ) )
                . _arch as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                siginfo_t__bindgen_ty_1__bindgen_ty_7 ) , "::" , stringify ! (
                _arch ) ));
}
impl Clone for siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<siginfo_t__bindgen_ty_1>() , 112usize ,
               concat ! (
               "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _pad as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _pad ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _kill as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _kill ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _timer as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _timer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _rt as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _rt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigchld as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigchld ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigfault
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigfault ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigpoll as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigpoll ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t__bindgen_ty_1 ) ) . _sigsys as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t__bindgen_ty_1
                ) , "::" , stringify ! ( _sigsys ) ));
}
impl Clone for siginfo_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    assert_eq!(::std::mem::size_of::<siginfo_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( siginfo_t ) ));
    assert_eq! (::std::mem::align_of::<siginfo_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( siginfo_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . si_signo as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( si_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . si_errno as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( si_errno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . si_code as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( si_code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const siginfo_t ) ) . _sifields as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( siginfo_t ) , "::" ,
                stringify ! ( _sifields ) ));
}
impl Clone for siginfo_t {
    fn clone(&self) -> Self { *self }
}
pub const SI_ASYNCNL: _bindgen_ty_4 = _bindgen_ty_4::SI_ASYNCNL;
pub const SI_TKILL: _bindgen_ty_4 = _bindgen_ty_4::SI_TKILL;
pub const SI_SIGIO: _bindgen_ty_4 = _bindgen_ty_4::SI_SIGIO;
pub const SI_ASYNCIO: _bindgen_ty_4 = _bindgen_ty_4::SI_ASYNCIO;
pub const SI_MESGQ: _bindgen_ty_4 = _bindgen_ty_4::SI_MESGQ;
pub const SI_TIMER: _bindgen_ty_4 = _bindgen_ty_4::SI_TIMER;
pub const SI_QUEUE: _bindgen_ty_4 = _bindgen_ty_4::SI_QUEUE;
pub const SI_USER: _bindgen_ty_4 = _bindgen_ty_4::SI_USER;
pub const SI_KERNEL: _bindgen_ty_4 = _bindgen_ty_4::SI_KERNEL;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    SI_ASYNCNL = -60,
    SI_TKILL = -6,
    SI_SIGIO = -5,
    SI_ASYNCIO = -4,
    SI_MESGQ = -3,
    SI_TIMER = -2,
    SI_QUEUE = -1,
    SI_USER = 0,
    SI_KERNEL = 128,
}
pub const ILL_ILLOPC: _bindgen_ty_5 = _bindgen_ty_5::ILL_ILLOPC;
pub const ILL_ILLOPN: _bindgen_ty_5 = _bindgen_ty_5::ILL_ILLOPN;
pub const ILL_ILLADR: _bindgen_ty_5 = _bindgen_ty_5::ILL_ILLADR;
pub const ILL_ILLTRP: _bindgen_ty_5 = _bindgen_ty_5::ILL_ILLTRP;
pub const ILL_PRVOPC: _bindgen_ty_5 = _bindgen_ty_5::ILL_PRVOPC;
pub const ILL_PRVREG: _bindgen_ty_5 = _bindgen_ty_5::ILL_PRVREG;
pub const ILL_COPROC: _bindgen_ty_5 = _bindgen_ty_5::ILL_COPROC;
pub const ILL_BADSTK: _bindgen_ty_5 = _bindgen_ty_5::ILL_BADSTK;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
}
pub const FPE_INTDIV: _bindgen_ty_6 = _bindgen_ty_6::FPE_INTDIV;
pub const FPE_INTOVF: _bindgen_ty_6 = _bindgen_ty_6::FPE_INTOVF;
pub const FPE_FLTDIV: _bindgen_ty_6 = _bindgen_ty_6::FPE_FLTDIV;
pub const FPE_FLTOVF: _bindgen_ty_6 = _bindgen_ty_6::FPE_FLTOVF;
pub const FPE_FLTUND: _bindgen_ty_6 = _bindgen_ty_6::FPE_FLTUND;
pub const FPE_FLTRES: _bindgen_ty_6 = _bindgen_ty_6::FPE_FLTRES;
pub const FPE_FLTINV: _bindgen_ty_6 = _bindgen_ty_6::FPE_FLTINV;
pub const FPE_FLTSUB: _bindgen_ty_6 = _bindgen_ty_6::FPE_FLTSUB;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
}
pub const SEGV_MAPERR: _bindgen_ty_7 = _bindgen_ty_7::SEGV_MAPERR;
pub const SEGV_ACCERR: _bindgen_ty_7 = _bindgen_ty_7::SEGV_ACCERR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_7 { SEGV_MAPERR = 1, SEGV_ACCERR = 2, }
pub const BUS_ADRALN: _bindgen_ty_8 = _bindgen_ty_8::BUS_ADRALN;
pub const BUS_ADRERR: _bindgen_ty_8 = _bindgen_ty_8::BUS_ADRERR;
pub const BUS_OBJERR: _bindgen_ty_8 = _bindgen_ty_8::BUS_OBJERR;
pub const BUS_MCEERR_AR: _bindgen_ty_8 = _bindgen_ty_8::BUS_MCEERR_AR;
pub const BUS_MCEERR_AO: _bindgen_ty_8 = _bindgen_ty_8::BUS_MCEERR_AO;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_8 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}
pub const CLD_EXITED: _bindgen_ty_9 = _bindgen_ty_9::CLD_EXITED;
pub const CLD_KILLED: _bindgen_ty_9 = _bindgen_ty_9::CLD_KILLED;
pub const CLD_DUMPED: _bindgen_ty_9 = _bindgen_ty_9::CLD_DUMPED;
pub const CLD_TRAPPED: _bindgen_ty_9 = _bindgen_ty_9::CLD_TRAPPED;
pub const CLD_STOPPED: _bindgen_ty_9 = _bindgen_ty_9::CLD_STOPPED;
pub const CLD_CONTINUED: _bindgen_ty_9 = _bindgen_ty_9::CLD_CONTINUED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_9 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}
pub const POLL_IN: _bindgen_ty_10 = _bindgen_ty_10::POLL_IN;
pub const POLL_OUT: _bindgen_ty_10 = _bindgen_ty_10::POLL_OUT;
pub const POLL_MSG: _bindgen_ty_10 = _bindgen_ty_10::POLL_MSG;
pub const POLL_ERR: _bindgen_ty_10 = _bindgen_ty_10::POLL_ERR;
pub const POLL_PRI: _bindgen_ty_10 = _bindgen_ty_10::POLL_PRI;
pub const POLL_HUP: _bindgen_ty_10 = _bindgen_ty_10::POLL_HUP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_10 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent__bindgen_ty_1 {
    pub _pad: __BindgenUnionField<[::std::os::raw::c_int; 12usize]>,
    pub _tid: __BindgenUnionField<__pid_t>,
    pub _sigev_thread: __BindgenUnionField<sigevent__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() ,
               16usize , concat ! (
               "Size of: " , stringify ! (
               sigevent__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                sigevent__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1__bindgen_ty_1 ) )
                . _function as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                _function ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1__bindgen_ty_1 ) )
                . _attribute as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigevent__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! (
                _attribute ) ));
}
impl Clone for sigevent__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigevent__bindgen_ty_1>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( sigevent__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<sigevent__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( sigevent__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) . _pad as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1
                ) , "::" , stringify ! ( _pad ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) . _tid as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1
                ) , "::" , stringify ! ( _tid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent__bindgen_ty_1 ) ) .
                _sigev_thread as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent__bindgen_ty_1
                ) , "::" , stringify ! ( _sigev_thread ) ));
}
impl Clone for sigevent__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(::std::mem::size_of::<sigevent>() , 64usize , concat ! (
               "Size of: " , stringify ! ( sigevent ) ));
    assert_eq! (::std::mem::align_of::<sigevent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigevent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_value as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_signo as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_notify as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_notify ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . _sigev_un as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( _sigev_un ) ));
}
impl Clone for sigevent {
    fn clone(&self) -> Self { *self }
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_11 = _bindgen_ty_11::SIGEV_SIGNAL;
pub const SIGEV_NONE: _bindgen_ty_11 = _bindgen_ty_11::SIGEV_NONE;
pub const SIGEV_THREAD: _bindgen_ty_11 = _bindgen_ty_11::SIGEV_THREAD;
pub const SIGEV_THREAD_ID: _bindgen_ty_11 = _bindgen_ty_11::SIGEV_THREAD_ID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_11 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}
pub type __sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int,
                         __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int,
                   __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t,
                    __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(__set: *const sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaction__bindgen_ty_1 {
    pub sa_handler: __BindgenUnionField<__sighandler_t>,
    pub sa_sigaction: __BindgenUnionField<::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         ::std::os::raw::c_int,
                                                                                     arg2:
                                                                                         *mut siginfo_t,
                                                                                     arg3:
                                                                                         *mut ::std::os::raw::c_void)>>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigaction__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( sigaction__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<sigaction__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( sigaction__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction__bindgen_ty_1 ) ) . sa_handler
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction__bindgen_ty_1
                ) , "::" , stringify ! ( sa_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction__bindgen_ty_1 ) ) .
                sa_sigaction as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction__bindgen_ty_1
                ) , "::" , stringify ! ( sa_sigaction ) ));
}
impl Clone for sigaction__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(::std::mem::size_of::<sigaction>() , 152usize , concat ! (
               "Size of: " , stringify ! ( sigaction ) ));
    assert_eq! (::std::mem::align_of::<sigaction>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigaction ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . __sigaction_handler as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( __sigaction_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_mask as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_flags as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_restorer as * const _
                as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_restorer ) ));
}
impl Clone for sigaction {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn sigprocmask(__how: ::std::os::raw::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(__sig: ::std::os::raw::c_int, __act: *const sigaction,
                     __oact: *mut sigaction) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(__pid: __pid_t, __sig: ::std::os::raw::c_int,
                    __val: sigval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_sys_siglist"]
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    #[link_name = "sys_siglist"]
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    assert_eq!(::std::mem::size_of::<_fpx_sw_bytes>() , 48usize , concat ! (
               "Size of: " , stringify ! ( _fpx_sw_bytes ) ));
    assert_eq! (::std::mem::align_of::<_fpx_sw_bytes>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _fpx_sw_bytes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . magic1 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( magic1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . extended_size as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( extended_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . xstate_bv as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( xstate_bv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . xstate_size as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( xstate_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpx_sw_bytes ) ) . padding as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpx_sw_bytes ) , "::"
                , stringify ! ( padding ) ));
}
impl Clone for _fpx_sw_bytes {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    assert_eq!(::std::mem::size_of::<_fpreg>() , 10usize , concat ! (
               "Size of: " , stringify ! ( _fpreg ) ));
    assert_eq! (::std::mem::align_of::<_fpreg>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _fpreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpreg ) ) . significand as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpreg ) , "::" ,
                stringify ! ( significand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpreg ) ) . exponent as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpreg ) , "::" ,
                stringify ! ( exponent ) ));
}
impl Clone for _fpreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    assert_eq!(::std::mem::size_of::<_fpxreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _fpxreg ) ));
    assert_eq! (::std::mem::align_of::<_fpxreg>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _fpxreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpxreg ) ) . significand as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpxreg ) , "::" ,
                stringify ! ( significand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpxreg ) ) . exponent as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpxreg ) , "::" ,
                stringify ! ( exponent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpxreg ) ) . padding as * const _ as
                usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpxreg ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for _fpxreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    assert_eq!(::std::mem::size_of::<_xmmreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _xmmreg ) ));
    assert_eq! (::std::mem::align_of::<_xmmreg>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _xmmreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xmmreg ) ) . element as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _xmmreg ) , "::" ,
                stringify ! ( element ) ));
}
impl Clone for _xmmreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    assert_eq!(::std::mem::size_of::<_fpstate>() , 512usize , concat ! (
               "Size of: " , stringify ! ( _fpstate ) ));
    assert_eq! (::std::mem::align_of::<_fpstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _fpstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . cwd as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( cwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . swd as * const _ as usize
                } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( swd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . ftw as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( ftw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . fop as * const _ as usize
                } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( fop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . rip as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( rip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . rdp as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( rdp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . mxcsr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . mxcr_mask as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( mxcr_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . _st as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( _st ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . _xmm as * const _ as usize
                } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( _xmm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _fpstate ) ) . padding as * const _ as
                usize } , 416usize , concat ! (
                "Alignment of field: " , stringify ! ( _fpstate ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for _fpstate {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigcontext__bindgen_ty_1 {
    pub fpstate: __BindgenUnionField<*mut _fpstate>,
    pub __fpstate_word: __BindgenUnionField<__uint64_t>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<sigcontext__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( sigcontext__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<sigcontext__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( sigcontext__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext__bindgen_ty_1 ) ) . fpstate as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigcontext__bindgen_ty_1 ) , "::" , stringify ! ( fpstate )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext__bindgen_ty_1 ) ) .
                __fpstate_word as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                sigcontext__bindgen_ty_1 ) , "::" , stringify ! (
                __fpstate_word ) ));
}
impl Clone for sigcontext__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(::std::mem::size_of::<sigcontext>() , 256usize , concat ! (
               "Size of: " , stringify ! ( sigcontext ) ));
    assert_eq! (::std::mem::align_of::<sigcontext>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigcontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r8 as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r9 as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r9 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r10 as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r11 as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r12 as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r13 as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r13 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r14 as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r14 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . r15 as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( r15 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rdi as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rdi ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rsi as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rsi ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rbp as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rbp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rbx as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rbx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rdx as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rdx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rax as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rax ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rcx as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rcx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rsp as * const _ as
                usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rsp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . rip as * const _ as
                usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( rip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . eflags as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( eflags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . cs as * const _ as usize
                } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( cs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . gs as * const _ as usize
                } , 146usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( gs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . fs as * const _ as usize
                } , 148usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( fs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . __pad0 as * const _ as
                usize } , 150usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( __pad0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . err as * const _ as
                usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( err ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . trapno as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( trapno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . oldmask as * const _ as
                usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( oldmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . cr2 as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( cr2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigcontext ) ) . __reserved1 as * const _
                as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( sigcontext ) , "::" ,
                stringify ! ( __reserved1 ) ));
}
impl Clone for sigcontext {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    assert_eq!(::std::mem::size_of::<_xsave_hdr>() , 64usize , concat ! (
               "Size of: " , stringify ! ( _xsave_hdr ) ));
    assert_eq! (::std::mem::align_of::<_xsave_hdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _xsave_hdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xsave_hdr ) ) . xstate_bv as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" ,
                stringify ! ( xstate_bv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xsave_hdr ) ) . reserved1 as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" ,
                stringify ! ( reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xsave_hdr ) ) . reserved2 as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _xsave_hdr ) , "::" ,
                stringify ! ( reserved2 ) ));
}
impl Clone for _xsave_hdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    assert_eq!(::std::mem::size_of::<_ymmh_state>() , 256usize , concat ! (
               "Size of: " , stringify ! ( _ymmh_state ) ));
    assert_eq! (::std::mem::align_of::<_ymmh_state>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _ymmh_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _ymmh_state ) ) . ymmh_space as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _ymmh_state ) , "::" ,
                stringify ! ( ymmh_space ) ));
}
#[repr(C)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    assert_eq!(::std::mem::size_of::<_xstate>() , 832usize , concat ! (
               "Size of: " , stringify ! ( _xstate ) ));
    assert_eq! (::std::mem::align_of::<_xstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _xstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xstate ) ) . fpstate as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _xstate ) , "::" ,
                stringify ! ( fpstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xstate ) ) . xstate_hdr as * const _ as
                usize } , 512usize , concat ! (
                "Alignment of field: " , stringify ! ( _xstate ) , "::" ,
                stringify ! ( xstate_hdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _xstate ) ) . ymmh as * const _ as usize
                } , 576usize , concat ! (
                "Alignment of field: " , stringify ! ( _xstate ) , "::" ,
                stringify ! ( ymmh ) ));
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(__sig: ::std::os::raw::c_int,
                        __interrupt: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(::std::mem::size_of::<sigstack>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sigstack ) ));
    assert_eq! (::std::mem::align_of::<sigstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_sp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_onstack as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_onstack ) ));
}
impl Clone for sigstack {
    fn clone(&self) -> Self { *self }
}
pub const SS_ONSTACK: _bindgen_ty_12 = _bindgen_ty_12::SS_ONSTACK;
pub const SS_DISABLE: _bindgen_ty_12 = _bindgen_ty_12::SS_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_12 { SS_ONSTACK = 1, SS_DISABLE = 2, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_sigaltstack() {
    assert_eq!(::std::mem::size_of::<sigaltstack>() , 24usize , concat ! (
               "Size of: " , stringify ! ( sigaltstack ) ));
    assert_eq! (::std::mem::align_of::<sigaltstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigaltstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaltstack ) ) . ss_sp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaltstack ) , "::" ,
                stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaltstack ) ) . ss_flags as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaltstack ) , "::" ,
                stringify ! ( ss_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaltstack ) ) . ss_size as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaltstack ) , "::" ,
                stringify ! ( ss_size ) ));
}
impl Clone for sigaltstack {
    fn clone(&self) -> Self { *self }
}
pub type stack_t = sigaltstack;
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    assert_eq!(::std::mem::size_of::<_libc_fpxreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _libc_fpxreg ) ));
    assert_eq! (::std::mem::align_of::<_libc_fpxreg>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( _libc_fpxreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpxreg ) ) . significand as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" ,
                stringify ! ( significand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpxreg ) ) . exponent as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" ,
                stringify ! ( exponent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpxreg ) ) . padding as * const _
                as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpxreg ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for _libc_fpxreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    assert_eq!(::std::mem::size_of::<_libc_xmmreg>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _libc_xmmreg ) ));
    assert_eq! (::std::mem::align_of::<_libc_xmmreg>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _libc_xmmreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_xmmreg ) ) . element as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_xmmreg ) , "::" ,
                stringify ! ( element ) ));
}
impl Clone for _libc_xmmreg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    assert_eq!(::std::mem::size_of::<_libc_fpstate>() , 512usize , concat ! (
               "Size of: " , stringify ! ( _libc_fpstate ) ));
    assert_eq! (::std::mem::align_of::<_libc_fpstate>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _libc_fpstate ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . cwd as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( cwd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . swd as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( swd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . ftw as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( ftw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . fop as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( fop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . rip as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( rip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . rdp as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( rdp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . mxcsr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . mxcr_mask as * const
                _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( mxcr_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . _st as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( _st ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . _xmm as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( _xmm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _libc_fpstate ) ) . padding as * const _
                as usize } , 416usize , concat ! (
                "Alignment of field: " , stringify ! ( _libc_fpstate ) , "::"
                , stringify ! ( padding ) ));
}
impl Clone for _libc_fpstate {
    fn clone(&self) -> Self { *self }
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    assert_eq!(::std::mem::size_of::<mcontext_t>() , 256usize , concat ! (
               "Size of: " , stringify ! ( mcontext_t ) ));
    assert_eq! (::std::mem::align_of::<mcontext_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mcontext_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mcontext_t ) ) . gregs as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mcontext_t ) , "::" ,
                stringify ! ( gregs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mcontext_t ) ) . fpregs as * const _ as
                usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( mcontext_t ) , "::" ,
                stringify ! ( fpregs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mcontext_t ) ) . __reserved1 as * const _
                as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( mcontext_t ) , "::" ,
                stringify ! ( __reserved1 ) ));
}
impl Clone for mcontext_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: _libc_fpstate,
}
#[test]
fn bindgen_test_layout_ucontext() {
    assert_eq!(::std::mem::size_of::<ucontext>() , 936usize , concat ! (
               "Size of: " , stringify ! ( ucontext ) ));
    assert_eq! (::std::mem::align_of::<ucontext>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ucontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_link as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_link ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_stack as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_mcontext as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_mcontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . uc_sigmask as * const _ as
                usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( uc_sigmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ucontext ) ) . __fpregs_mem as * const _
                as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! ( ucontext ) , "::" ,
                stringify ! ( __fpregs_mem ) ));
}
impl Clone for ucontext {
    fn clone(&self) -> Self { *self }
}
pub type ucontext_t = ucontext;
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(__ss: *const sigaltstack, __oss: *mut sigaltstack)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(__how: ::std::os::raw::c_int,
                           __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(::std::mem::size_of::<timezone>() , 8usize , concat ! (
               "Size of: " , stringify ! ( timezone ) ));
    assert_eq! (::std::mem::align_of::<timezone>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( timezone ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timezone ) ) . tz_minuteswest as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timezone ) , "::" ,
                stringify ! ( tz_minuteswest ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timezone ) ) . tz_dsttime as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( timezone ) , "::" ,
                stringify ! ( tz_dsttime ) ));
}
impl Clone for timezone {
    fn clone(&self) -> Self { *self }
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __itimer_which {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(::std::mem::size_of::<itimerval>() , 32usize , concat ! (
               "Size of: " , stringify ! ( itimerval ) ));
    assert_eq! (::std::mem::align_of::<itimerval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( itimerval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerval ) ) . it_interval as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerval ) , "::" ,
                stringify ! ( it_interval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerval ) ) . it_value as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerval ) , "::" ,
                stringify ! ( it_value ) ));
}
impl Clone for itimerval {
    fn clone(&self) -> Self { *self }
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(__which: __itimer_which_t, __new: *const itimerval,
                     __old: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(__file: *const ::std::os::raw::c_char,
                  __tvp: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(__file: *const ::std::os::raw::c_char,
                   __tvp: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(::std::mem::size_of::<tm>() , 56usize , concat ! (
               "Size of: " , stringify ! ( tm ) ));
    assert_eq! (::std::mem::align_of::<tm>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( tm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_sec as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_min as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_min ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_hour as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_hour ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mday as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mon as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mon ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_year as * const _ as usize }
                , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_year ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_wday as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_wday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_yday as * const _ as usize }
                , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_yday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_isdst as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_isdst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_gmtoff as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_gmtoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_zone as * const _ as usize }
                , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_zone ) ));
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(::std::mem::size_of::<itimerspec>() , 32usize , concat ! (
               "Size of: " , stringify ! ( itimerspec ) ));
    assert_eq! (::std::mem::align_of::<itimerspec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( itimerspec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_interval as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_interval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_value as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_value ) ));
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> usize;
}
extern "C" {
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(__ident: *const ::std::os::raw::c_char,
                   __option: ::std::os::raw::c_int,
                   __facility: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(__pri: ::std::os::raw::c_int,
                  __fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(__pri: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char,
                   __ap: *mut __va_list_tag);
}
pub type __psint_t = ::std::os::raw::c_long;
pub type __pmUserID = uid_t;
pub type __pmGroupID = gid_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(::std::mem::size_of::<iovec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( iovec ) ));
    assert_eq! (::std::mem::align_of::<iovec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( iovec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const iovec ) ) . iov_base as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( iovec ) , "::" ,
                stringify ! ( iov_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const iovec ) ) . iov_len as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( iovec ) , "::" ,
                stringify ! ( iov_len ) ));
}
impl Clone for iovec {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn readv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                 __count: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn writev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn preadv(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                  __count: ::std::os::raw::c_int, __offset: __off_t) -> isize;
}
extern "C" {
    pub fn pwritev(__fd: ::std::os::raw::c_int, __iovec: *const iovec,
                   __count: ::std::os::raw::c_int, __offset: __off_t)
     -> isize;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __socket_type {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2,
    SOCK_RAW = 3,
    SOCK_RDM = 4,
    SOCK_SEQPACKET = 5,
    SOCK_DCCP = 6,
    SOCK_PACKET = 10,
    SOCK_CLOEXEC = 524288,
    SOCK_NONBLOCK = 2048,
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(::std::mem::size_of::<sockaddr>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sockaddr ) ));
    assert_eq! (::std::mem::align_of::<sockaddr>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( sockaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr ) ) . sa_family as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr ) , "::" ,
                stringify ! ( sa_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr ) ) . sa_data as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr ) , "::" ,
                stringify ! ( sa_data ) ));
}
impl Clone for sockaddr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(::std::mem::size_of::<sockaddr_storage>() , 128usize , concat !
               ( "Size of: " , stringify ! ( sockaddr_storage ) ));
    assert_eq! (::std::mem::align_of::<sockaddr_storage>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( sockaddr_storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . ss_family as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( ss_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . __ss_padding as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( __ss_padding ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sockaddr_storage ) ) . __ss_align as *
                const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( sockaddr_storage ) ,
                "::" , stringify ! ( __ss_align ) ));
}
pub const MSG_OOB: _bindgen_ty_13 = _bindgen_ty_13::MSG_OOB;
pub const MSG_PEEK: _bindgen_ty_13 = _bindgen_ty_13::MSG_PEEK;
pub const MSG_DONTROUTE: _bindgen_ty_13 = _bindgen_ty_13::MSG_DONTROUTE;
pub const MSG_CTRUNC: _bindgen_ty_13 = _bindgen_ty_13::MSG_CTRUNC;
pub const MSG_PROXY: _bindgen_ty_13 = _bindgen_ty_13::MSG_PROXY;
pub const MSG_TRUNC: _bindgen_ty_13 = _bindgen_ty_13::MSG_TRUNC;
pub const MSG_DONTWAIT: _bindgen_ty_13 = _bindgen_ty_13::MSG_DONTWAIT;
pub const MSG_EOR: _bindgen_ty_13 = _bindgen_ty_13::MSG_EOR;
pub const MSG_WAITALL: _bindgen_ty_13 = _bindgen_ty_13::MSG_WAITALL;
pub const MSG_FIN: _bindgen_ty_13 = _bindgen_ty_13::MSG_FIN;
pub const MSG_SYN: _bindgen_ty_13 = _bindgen_ty_13::MSG_SYN;
pub const MSG_CONFIRM: _bindgen_ty_13 = _bindgen_ty_13::MSG_CONFIRM;
pub const MSG_RST: _bindgen_ty_13 = _bindgen_ty_13::MSG_RST;
pub const MSG_ERRQUEUE: _bindgen_ty_13 = _bindgen_ty_13::MSG_ERRQUEUE;
pub const MSG_NOSIGNAL: _bindgen_ty_13 = _bindgen_ty_13::MSG_NOSIGNAL;
pub const MSG_MORE: _bindgen_ty_13 = _bindgen_ty_13::MSG_MORE;
pub const MSG_WAITFORONE: _bindgen_ty_13 = _bindgen_ty_13::MSG_WAITFORONE;
pub const MSG_FASTOPEN: _bindgen_ty_13 = _bindgen_ty_13::MSG_FASTOPEN;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_13 = _bindgen_ty_13::MSG_CMSG_CLOEXEC;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_13 {
    MSG_OOB = 1,
    MSG_PEEK = 2,
    MSG_DONTROUTE = 4,
    MSG_CTRUNC = 8,
    MSG_PROXY = 16,
    MSG_TRUNC = 32,
    MSG_DONTWAIT = 64,
    MSG_EOR = 128,
    MSG_WAITALL = 256,
    MSG_FIN = 512,
    MSG_SYN = 1024,
    MSG_CONFIRM = 2048,
    MSG_RST = 4096,
    MSG_ERRQUEUE = 8192,
    MSG_NOSIGNAL = 16384,
    MSG_MORE = 32768,
    MSG_WAITFORONE = 65536,
    MSG_FASTOPEN = 536870912,
    MSG_CMSG_CLOEXEC = 1073741824,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(::std::mem::size_of::<msghdr>() , 56usize , concat ! (
               "Size of: " , stringify ! ( msghdr ) ));
    assert_eq! (::std::mem::align_of::<msghdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( msghdr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_namelen as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_namelen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_iov as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_iov ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_iovlen as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_iovlen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_control as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_control ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_controllen as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_controllen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const msghdr ) ) . msg_flags as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( msghdr ) , "::" ,
                stringify ! ( msg_flags ) ));
}
impl Clone for msghdr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(::std::mem::size_of::<cmsghdr>() , 16usize , concat ! (
               "Size of: " , stringify ! ( cmsghdr ) ));
    assert_eq! (::std::mem::align_of::<cmsghdr>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( cmsghdr ) ));
}
impl Clone for cmsghdr {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr)
     -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_14 = _bindgen_ty_14::SCM_RIGHTS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_14 { SCM_RIGHTS = 1, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(::std::mem::size_of::<linger>() , 8usize , concat ! (
               "Size of: " , stringify ! ( linger ) ));
    assert_eq! (::std::mem::align_of::<linger>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( linger ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linger ) ) . l_onoff as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( linger ) , "::" ,
                stringify ! ( l_onoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const linger ) ) . l_linger as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( linger ) , "::" ,
                stringify ! ( l_linger ) ));
}
impl Clone for linger {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(::std::mem::size_of::<osockaddr>() , 16usize , concat ! (
               "Size of: " , stringify ! ( osockaddr ) ));
    assert_eq! (::std::mem::align_of::<osockaddr>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( osockaddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const osockaddr ) ) . sa_family as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( osockaddr ) , "::" ,
                stringify ! ( sa_family ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const osockaddr ) ) . sa_data as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( osockaddr ) , "::" ,
                stringify ! ( sa_data ) ));
}
impl Clone for osockaddr {
    fn clone(&self) -> Self { *self }
}
pub const SHUT_RD: _bindgen_ty_15 = _bindgen_ty_15::SHUT_RD;
pub const SHUT_WR: _bindgen_ty_15 = _bindgen_ty_15::SHUT_WR;
pub const SHUT_RDWR: _bindgen_ty_15 = _bindgen_ty_15::SHUT_RDWR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_15 { SHUT_RD = 0, SHUT_WR = 1, SHUT_RDWR = 2, }
extern "C" {
    pub fn socket(__domain: ::std::os::raw::c_int,
                  __type: ::std::os::raw::c_int,
                  __protocol: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(__domain: ::std::os::raw::c_int,
                      __type: ::std::os::raw::c_int,
                      __protocol: ::std::os::raw::c_int,
                      __fds: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                __len: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(__fd: ::std::os::raw::c_int, __addr: *const sockaddr,
                   __len: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                       __len: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(__fd: ::std::os::raw::c_int,
                __buf: *const ::std::os::raw::c_void, __n: usize,
                __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn recv(__fd: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_void, __n: usize,
                __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn sendto(__fd: ::std::os::raw::c_int,
                  __buf: *const ::std::os::raw::c_void, __n: usize,
                  __flags: ::std::os::raw::c_int, __addr: *const sockaddr,
                  __addr_len: socklen_t) -> isize;
}
extern "C" {
    pub fn recvfrom(__fd: ::std::os::raw::c_int,
                    __buf: *mut ::std::os::raw::c_void, __n: usize,
                    __flags: ::std::os::raw::c_int, __addr: *mut sockaddr,
                    __addr_len: *mut socklen_t) -> isize;
}
extern "C" {
    pub fn sendmsg(__fd: ::std::os::raw::c_int, __message: *const msghdr,
                   __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn recvmsg(__fd: ::std::os::raw::c_int, __message: *mut msghdr,
                   __flags: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn getsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *mut ::std::os::raw::c_void,
                      __optlen: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(__fd: ::std::os::raw::c_int,
                      __level: ::std::os::raw::c_int,
                      __optname: ::std::os::raw::c_int,
                      __optval: *const ::std::os::raw::c_void,
                      __optlen: socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(__fd: ::std::os::raw::c_int, __addr: *mut sockaddr,
                  __addr_len: *mut socklen_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(__fd: ::std::os::raw::c_int, __how: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(__fd: ::std::os::raw::c_int,
                    __fdtype: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type __pmSockLen = socklen_t;
pub type SIG_PF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn dirname(__path: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __xpg_basename(__path: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type pmID = ::std::os::raw::c_uint;
pub type pmInDom = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmUnits {
    pub _bitfield_1: [u8; 4usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_pmUnits() {
    assert_eq!(::std::mem::size_of::<pmUnits>() , 4usize , concat ! (
               "Size of: " , stringify ! ( pmUnits ) ));
    assert_eq! (::std::mem::align_of::<pmUnits>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( pmUnits ) ));
}
impl Clone for pmUnits {
    fn clone(&self) -> Self { *self }
}
impl pmUnits {
    #[inline]
    pub fn pad(&self) -> ::std::os::raw::c_uint {
        let mask = 255usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_pad(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 255usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn scaleCount(&self) -> ::std::os::raw::c_int {
        let mask = 3840usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_scaleCount(&mut self, val: ::std::os::raw::c_int) {
        let mask = 3840usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn scaleTime(&self) -> ::std::os::raw::c_uint {
        let mask = 61440usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 12usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_scaleTime(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 61440usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 12usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn scaleSpace(&self) -> ::std::os::raw::c_uint {
        let mask = 983040usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_scaleSpace(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 983040usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 16usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn dimCount(&self) -> ::std::os::raw::c_int {
        let mask = 15728640usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 20usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_dimCount(&mut self, val: ::std::os::raw::c_int) {
        let mask = 15728640usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 20usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn dimTime(&self) -> ::std::os::raw::c_int {
        let mask = 251658240usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_dimTime(&mut self, val: ::std::os::raw::c_int) {
        let mask = 251658240usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 24usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn dimSpace(&self) -> ::std::os::raw::c_int {
        let mask = 4026531840usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 28usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_dimSpace(&mut self, val: ::std::os::raw::c_int) {
        let mask = 4026531840usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 28usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmDesc {
    pub pmid: pmID,
    pub type_: ::std::os::raw::c_int,
    pub indom: pmInDom,
    pub sem: ::std::os::raw::c_int,
    pub units: pmUnits,
}
#[test]
fn bindgen_test_layout_pmDesc() {
    assert_eq!(::std::mem::size_of::<pmDesc>() , 20usize , concat ! (
               "Size of: " , stringify ! ( pmDesc ) ));
    assert_eq! (::std::mem::align_of::<pmDesc>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( pmDesc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmDesc ) ) . pmid as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmDesc ) , "::" ,
                stringify ! ( pmid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmDesc ) ) . type_ as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( pmDesc ) , "::" ,
                stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmDesc ) ) . indom as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmDesc ) , "::" ,
                stringify ! ( indom ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmDesc ) ) . sem as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( pmDesc ) , "::" ,
                stringify ! ( sem ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmDesc ) ) . units as * const _ as usize
                } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( pmDesc ) , "::" ,
                stringify ! ( units ) ));
}
impl Clone for pmDesc {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn pmErrStr(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmErrStr_r(arg1: ::std::os::raw::c_int,
                      arg2: *mut ::std::os::raw::c_char,
                      arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmLoadNameSpace(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmLoadASCIINameSpace(arg1: *const ::std::os::raw::c_char,
                                arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmUnloadNameSpace();
}
extern "C" {
    pub fn pmGetPMNSLocation() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmTrimNameSpace() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmLookupName(arg1: ::std::os::raw::c_int,
                        arg2: *mut *mut ::std::os::raw::c_char,
                        arg3: *mut pmID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetChildren(arg1: *const ::std::os::raw::c_char,
                         arg2: *mut *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetChildrenStatus(arg1: *const ::std::os::raw::c_char,
                               arg2: *mut *mut *mut ::std::os::raw::c_char,
                               arg3: *mut *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmNameID(arg1: pmID, arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmNameAll(arg1: pmID, arg2: *mut *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmTraversePMNS(arg1: *const ::std::os::raw::c_char,
                          arg2:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *const ::std::os::raw::c_char)>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmTraversePMNS_r(arg1: *const ::std::os::raw::c_char,
                            arg2:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *const ::std::os::raw::c_char,
                                                                           arg2:
                                                                               *mut ::std::os::raw::c_void)>,
                            arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmLookupDesc(arg1: pmID, arg2: *mut pmDesc)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmLookupInDom(arg1: pmInDom, arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmLookupInDomArchive(arg1: pmInDom,
                                arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmNameInDom(arg1: pmInDom, arg2: ::std::os::raw::c_int,
                       arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmNameInDomArchive(arg1: pmInDom, arg2: ::std::os::raw::c_int,
                              arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetInDom(arg1: pmInDom, arg2: *mut *mut ::std::os::raw::c_int,
                      arg3: *mut *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetInDomArchive(arg1: pmInDom,
                             arg2: *mut *mut ::std::os::raw::c_int,
                             arg3: *mut *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetContextHostName(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmGetContextHostName_r(arg1: ::std::os::raw::c_int,
                                  arg2: *mut ::std::os::raw::c_char,
                                  arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmWhichContext() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmDestroyContext(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmNewContext(arg1: ::std::os::raw::c_int,
                        arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmDupContext() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmUseContext(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmReconnectContext(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmAddProfile(arg1: pmInDom, arg2: ::std::os::raw::c_int,
                        arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmDelProfile(arg1: pmInDom, arg2: ::std::os::raw::c_int,
                        arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmValueBlock {
    pub _bitfield_1: u32,
    pub vbuf: [::std::os::raw::c_char; 1usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_pmValueBlock() {
    assert_eq!(::std::mem::size_of::<pmValueBlock>() , 8usize , concat ! (
               "Size of: " , stringify ! ( pmValueBlock ) ));
    assert_eq! (::std::mem::align_of::<pmValueBlock>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( pmValueBlock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmValueBlock ) ) . vbuf as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( pmValueBlock ) , "::" ,
                stringify ! ( vbuf ) ));
}
impl Clone for pmValueBlock {
    fn clone(&self) -> Self { *self }
}
impl pmValueBlock {
    #[inline]
    pub fn vlen(&self) -> ::std::os::raw::c_uint {
        let mask = 16777215usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_vlen(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 16777215usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn vtype(&self) -> ::std::os::raw::c_uint {
        let mask = 4278190080usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_vtype(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 4278190080usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 24usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmValue {
    pub inst: ::std::os::raw::c_int,
    pub value: pmValue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmValue__bindgen_ty_1 {
    pub pval: __BindgenUnionField<*mut pmValueBlock>,
    pub lval: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_pmValue__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pmValue__bindgen_ty_1>() , 8usize ,
               concat ! ( "Size of: " , stringify ! ( pmValue__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<pmValue__bindgen_ty_1>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( pmValue__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmValue__bindgen_ty_1 ) ) . pval as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmValue__bindgen_ty_1 )
                , "::" , stringify ! ( pval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmValue__bindgen_ty_1 ) ) . lval as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmValue__bindgen_ty_1 )
                , "::" , stringify ! ( lval ) ));
}
impl Clone for pmValue__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pmValue() {
    assert_eq!(::std::mem::size_of::<pmValue>() , 16usize , concat ! (
               "Size of: " , stringify ! ( pmValue ) ));
    assert_eq! (::std::mem::align_of::<pmValue>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pmValue ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmValue ) ) . inst as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmValue ) , "::" ,
                stringify ! ( inst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmValue ) ) . value as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmValue ) , "::" ,
                stringify ! ( value ) ));
}
impl Clone for pmValue {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmValueSet {
    pub pmid: pmID,
    pub numval: ::std::os::raw::c_int,
    pub valfmt: ::std::os::raw::c_int,
    pub vlist: [pmValue; 1usize],
}
#[test]
fn bindgen_test_layout_pmValueSet() {
    assert_eq!(::std::mem::size_of::<pmValueSet>() , 32usize , concat ! (
               "Size of: " , stringify ! ( pmValueSet ) ));
    assert_eq! (::std::mem::align_of::<pmValueSet>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pmValueSet ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmValueSet ) ) . pmid as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmValueSet ) , "::" ,
                stringify ! ( pmid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmValueSet ) ) . numval as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( pmValueSet ) , "::" ,
                stringify ! ( numval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmValueSet ) ) . valfmt as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmValueSet ) , "::" ,
                stringify ! ( valfmt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmValueSet ) ) . vlist as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( pmValueSet ) , "::" ,
                stringify ! ( vlist ) ));
}
impl Clone for pmValueSet {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmResult {
    pub timestamp: timeval,
    pub numpmid: ::std::os::raw::c_int,
    pub vset: [*mut pmValueSet; 1usize],
}
#[test]
fn bindgen_test_layout_pmResult() {
    assert_eq!(::std::mem::size_of::<pmResult>() , 32usize , concat ! (
               "Size of: " , stringify ! ( pmResult ) ));
    assert_eq! (::std::mem::align_of::<pmResult>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pmResult ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmResult ) ) . timestamp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmResult ) , "::" ,
                stringify ! ( timestamp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmResult ) ) . numpmid as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( pmResult ) , "::" ,
                stringify ! ( numpmid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmResult ) ) . vset as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( pmResult ) , "::" ,
                stringify ! ( vset ) ));
}
impl Clone for pmResult {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmHighResResult {
    pub timestamp: timespec,
    pub numpmid: ::std::os::raw::c_int,
    pub vset: [*mut pmValueSet; 1usize],
}
#[test]
fn bindgen_test_layout_pmHighResResult() {
    assert_eq!(::std::mem::size_of::<pmHighResResult>() , 32usize , concat ! (
               "Size of: " , stringify ! ( pmHighResResult ) ));
    assert_eq! (::std::mem::align_of::<pmHighResResult>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pmHighResResult ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmHighResResult ) ) . timestamp as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmHighResResult ) ,
                "::" , stringify ! ( timestamp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmHighResResult ) ) . numpmid as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( pmHighResResult ) ,
                "::" , stringify ! ( numpmid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmHighResResult ) ) . vset as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( pmHighResResult ) ,
                "::" , stringify ! ( vset ) ));
}
impl Clone for pmHighResResult {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmAtomValue {
    pub l: __BindgenUnionField<__int32_t>,
    pub ul: __BindgenUnionField<__uint32_t>,
    pub ll: __BindgenUnionField<__int64_t>,
    pub ull: __BindgenUnionField<__uint64_t>,
    pub f: __BindgenUnionField<f32>,
    pub d: __BindgenUnionField<f64>,
    pub cp: __BindgenUnionField<*mut ::std::os::raw::c_char>,
    pub vbp: __BindgenUnionField<*mut pmValueBlock>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_pmAtomValue() {
    assert_eq!(::std::mem::size_of::<pmAtomValue>() , 8usize , concat ! (
               "Size of: " , stringify ! ( pmAtomValue ) ));
    assert_eq! (::std::mem::align_of::<pmAtomValue>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pmAtomValue ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmAtomValue ) ) . l as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmAtomValue ) , "::" ,
                stringify ! ( l ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmAtomValue ) ) . ul as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmAtomValue ) , "::" ,
                stringify ! ( ul ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmAtomValue ) ) . ll as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmAtomValue ) , "::" ,
                stringify ! ( ll ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmAtomValue ) ) . ull as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmAtomValue ) , "::" ,
                stringify ! ( ull ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmAtomValue ) ) . f as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmAtomValue ) , "::" ,
                stringify ! ( f ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmAtomValue ) ) . d as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmAtomValue ) , "::" ,
                stringify ! ( d ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmAtomValue ) ) . cp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmAtomValue ) , "::" ,
                stringify ! ( cp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmAtomValue ) ) . vbp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmAtomValue ) , "::" ,
                stringify ! ( vbp ) ));
}
impl Clone for pmAtomValue {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn pmFetch(arg1: ::std::os::raw::c_int, arg2: *mut pmID,
                   arg3: *mut *mut pmResult) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmFetchArchive(arg1: *mut *mut pmResult) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pmTimeval {
    pub tv_sec: __int32_t,
    pub tv_usec: __int32_t,
}
#[test]
fn bindgen_test_layout___pmTimeval() {
    assert_eq!(::std::mem::size_of::<__pmTimeval>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __pmTimeval ) ));
    assert_eq! (::std::mem::align_of::<__pmTimeval>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __pmTimeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pmTimeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __pmTimeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pmTimeval ) ) . tv_usec as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __pmTimeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for __pmTimeval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pmTimespec {
    pub tv_sec: __int64_t,
    pub tv_nsec: __int64_t,
}
#[test]
fn bindgen_test_layout___pmTimespec() {
    assert_eq!(::std::mem::size_of::<__pmTimespec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( __pmTimespec ) ));
    assert_eq! (::std::mem::align_of::<__pmTimespec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __pmTimespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pmTimespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __pmTimespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pmTimespec ) ) . tv_nsec as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __pmTimespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for __pmTimespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct pmLogLabel {
    pub ll_magic: ::std::os::raw::c_int,
    pub ll_pid: pid_t,
    pub ll_start: timeval,
    pub ll_hostname: [::std::os::raw::c_char; 64usize],
    pub ll_tz: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_pmLogLabel() {
    assert_eq!(::std::mem::size_of::<pmLogLabel>() , 128usize , concat ! (
               "Size of: " , stringify ! ( pmLogLabel ) ));
    assert_eq! (::std::mem::align_of::<pmLogLabel>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pmLogLabel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLogLabel ) ) . ll_magic as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLogLabel ) , "::" ,
                stringify ! ( ll_magic ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLogLabel ) ) . ll_pid as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLogLabel ) , "::" ,
                stringify ! ( ll_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLogLabel ) ) . ll_start as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLogLabel ) , "::" ,
                stringify ! ( ll_start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLogLabel ) ) . ll_hostname as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLogLabel ) , "::" ,
                stringify ! ( ll_hostname ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLogLabel ) ) . ll_tz as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLogLabel ) , "::" ,
                stringify ! ( ll_tz ) ));
}
extern "C" {
    pub fn pmGetArchiveLabel(arg1: *mut pmLogLabel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetArchiveEnd(arg1: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmFreeResult(arg1: *mut pmResult);
}
extern "C" {
    pub fn pmFreeHighResResult(arg1: *mut pmHighResResult);
}
extern "C" {
    pub fn pmExtractValue(arg1: ::std::os::raw::c_int, arg2: *const pmValue,
                          arg3: ::std::os::raw::c_int, arg4: *mut pmAtomValue,
                          arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmPrintValue(arg1: *mut FILE, arg2: ::std::os::raw::c_int,
                        arg3: ::std::os::raw::c_int, arg4: *const pmValue,
                        arg5: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pmConvScale(arg1: ::std::os::raw::c_int, arg2: *const pmAtomValue,
                       arg3: *const pmUnits, arg4: *mut pmAtomValue,
                       arg5: *const pmUnits) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmSortInstances(arg1: *mut pmResult);
}
extern "C" {
    pub fn pmSetMode(arg1: ::std::os::raw::c_int, arg2: *const timeval,
                     arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmStore(arg1: *const pmResult) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmLookupText(arg1: pmID, arg2: ::std::os::raw::c_int,
                        arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmLookupInDomText(arg1: pmInDom, arg2: ::std::os::raw::c_int,
                             arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmIDStr(arg1: pmID) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmIDStr_r(arg1: pmID, arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmInDomStr(arg1: pmInDom) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmInDomStr_r(arg1: pmInDom, arg2: *mut ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmTypeStr(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmTypeStr_r(arg1: ::std::os::raw::c_int,
                       arg2: *mut ::std::os::raw::c_char,
                       arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmSemStr(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmSemStr_r(arg1: ::std::os::raw::c_int,
                      arg2: *mut ::std::os::raw::c_char,
                      arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmUnitsStr(arg1: *const pmUnits) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmUnitsStr_r(arg1: *const pmUnits,
                        arg2: *mut ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmAtomStr(arg1: *const pmAtomValue, arg2: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmAtomStr_r(arg1: *const pmAtomValue, arg2: ::std::os::raw::c_int,
                       arg3: *mut ::std::os::raw::c_char,
                       arg4: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmNumberStr(arg1: f64) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmNumberStr_r(arg1: f64, arg2: *mut ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmEventFlagsStr(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmEventFlagsStr_r(arg1: ::std::os::raw::c_int,
                             arg2: *mut ::std::os::raw::c_char,
                             arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmParseInterval(arg1: *const ::std::os::raw::c_char,
                           arg2: *mut timeval,
                           arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmParseTimeWindow(arg1: *const ::std::os::raw::c_char,
                             arg2: *const ::std::os::raw::c_char,
                             arg3: *const ::std::os::raw::c_char,
                             arg4: *const ::std::os::raw::c_char,
                             arg5: *const timeval, arg6: *const timeval,
                             arg7: *mut timeval, arg8: *mut timeval,
                             arg9: *mut timeval,
                             arg10: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmUseZone(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmNewZone(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmNewContextZone() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmWhichZone(arg1: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmCtime(arg1: *const time_t, arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmLocaltime(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmMetricSpec {
    pub isarch: ::std::os::raw::c_int,
    pub source: *mut ::std::os::raw::c_char,
    pub metric: *mut ::std::os::raw::c_char,
    pub ninst: ::std::os::raw::c_int,
    pub inst: [*mut ::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_pmMetricSpec() {
    assert_eq!(::std::mem::size_of::<pmMetricSpec>() , 40usize , concat ! (
               "Size of: " , stringify ! ( pmMetricSpec ) ));
    assert_eq! (::std::mem::align_of::<pmMetricSpec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pmMetricSpec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmMetricSpec ) ) . isarch as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmMetricSpec ) , "::" ,
                stringify ! ( isarch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmMetricSpec ) ) . source as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmMetricSpec ) , "::" ,
                stringify ! ( source ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmMetricSpec ) ) . metric as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( pmMetricSpec ) , "::" ,
                stringify ! ( metric ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmMetricSpec ) ) . ninst as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( pmMetricSpec ) , "::" ,
                stringify ! ( ninst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmMetricSpec ) ) . inst as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( pmMetricSpec ) , "::" ,
                stringify ! ( inst ) ));
}
impl Clone for pmMetricSpec {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn pmParseMetricSpec(arg1: *const ::std::os::raw::c_char,
                             arg2: ::std::os::raw::c_int,
                             arg3: *mut ::std::os::raw::c_char,
                             arg4: *mut *mut pmMetricSpec,
                             arg5: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmFreeMetricSpec(p: *mut pmMetricSpec);
}
extern "C" {
    pub fn pmprintf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmflush() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetConfig(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmGetOptionalConfig(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmGetVersion() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmOptions {
    pub version: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub short_options: *const ::std::os::raw::c_char,
    pub long_options: *mut pmLongOptions,
    pub short_usage: *const ::std::os::raw::c_char,
    pub override_: pmOptionOverride,
    pub index: ::std::os::raw::c_int,
    pub optind: ::std::os::raw::c_int,
    pub opterr: ::std::os::raw::c_int,
    pub optopt: ::std::os::raw::c_int,
    pub optarg: *mut ::std::os::raw::c_char,
    pub __initialized: ::std::os::raw::c_int,
    pub __nextchar: *mut ::std::os::raw::c_char,
    pub __ordering: ::std::os::raw::c_int,
    pub __posixly_correct: ::std::os::raw::c_int,
    pub __first_nonopt: ::std::os::raw::c_int,
    pub __last_nonopt: ::std::os::raw::c_int,
    pub errors: ::std::os::raw::c_int,
    pub context: ::std::os::raw::c_int,
    pub nhosts: ::std::os::raw::c_int,
    pub narchives: ::std::os::raw::c_int,
    pub hosts: *mut *mut ::std::os::raw::c_char,
    pub archives: *mut *mut ::std::os::raw::c_char,
    pub start: timeval,
    pub finish: timeval,
    pub origin: timeval,
    pub interval: timeval,
    pub align_optarg: *mut ::std::os::raw::c_char,
    pub start_optarg: *mut ::std::os::raw::c_char,
    pub finish_optarg: *mut ::std::os::raw::c_char,
    pub origin_optarg: *mut ::std::os::raw::c_char,
    pub guiport_optarg: *mut ::std::os::raw::c_char,
    pub timezone: *mut ::std::os::raw::c_char,
    pub samples: ::std::os::raw::c_int,
    pub guiport: ::std::os::raw::c_int,
    pub padding: ::std::os::raw::c_int,
    pub _bitfield_1: u32,
}
#[test]
fn bindgen_test_layout_pmOptions() {
    assert_eq!(::std::mem::size_of::<pmOptions>() , 256usize , concat ! (
               "Size of: " , stringify ! ( pmOptions ) ));
    assert_eq! (::std::mem::align_of::<pmOptions>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pmOptions ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . version as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( version ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . flags as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . short_options as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( short_options ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . long_options as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( long_options ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . short_usage as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( short_usage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . override_ as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( override_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . index as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( index ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . optind as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( optind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . opterr as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( opterr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . optopt as * const _ as
                usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( optopt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . optarg as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( optarg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . __initialized as * const
                _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( __initialized ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . __nextchar as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( __nextchar ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . __ordering as * const _
                as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( __ordering ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . __posixly_correct as *
                const _ as usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( __posixly_correct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . __first_nonopt as * const
                _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( __first_nonopt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . __last_nonopt as * const
                _ as usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( __last_nonopt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . errors as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( errors ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . context as * const _ as
                usize } , 100usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( context ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . nhosts as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( nhosts ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . narchives as * const _ as
                usize } , 108usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( narchives ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . hosts as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( hosts ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . archives as * const _ as
                usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( archives ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . start as * const _ as
                usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . finish as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( finish ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . origin as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( origin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . interval as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( interval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . align_optarg as * const _
                as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( align_optarg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . start_optarg as * const _
                as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( start_optarg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . finish_optarg as * const
                _ as usize } , 208usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( finish_optarg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . origin_optarg as * const
                _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( origin_optarg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . guiport_optarg as * const
                _ as usize } , 224usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( guiport_optarg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . timezone as * const _ as
                usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( timezone ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . samples as * const _ as
                usize } , 240usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( samples ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . guiport as * const _ as
                usize } , 244usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( guiport ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmOptions ) ) . padding as * const _ as
                usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! ( pmOptions ) , "::" ,
                stringify ! ( padding ) ));
}
impl Clone for pmOptions {
    fn clone(&self) -> Self { *self }
}
impl pmOptions {
    #[inline]
    pub fn guiflag(&self) -> ::std::os::raw::c_uint {
        let mask = 1usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_guiflag(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 1usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn tzflag(&self) -> ::std::os::raw::c_uint {
        let mask = 2usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 1usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_tzflag(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 2usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 1usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn nsflag(&self) -> ::std::os::raw::c_uint {
        let mask = 4usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 2usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_nsflag(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 4usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 2usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn Lflag(&self) -> ::std::os::raw::c_uint {
        let mask = 8usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 3usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_Lflag(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 8usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 3usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn zeroes(&self) -> ::std::os::raw::c_uint {
        let mask = 4294967280usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_zeroes(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 4294967280usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 4usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
}
pub type pmOptionOverride =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int,
                                               arg2: *mut pmOptions)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmLongOptions {
    pub long_opt: *const ::std::os::raw::c_char,
    pub has_arg: ::std::os::raw::c_int,
    pub short_opt: ::std::os::raw::c_int,
    pub argname: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pmLongOptions() {
    assert_eq!(::std::mem::size_of::<pmLongOptions>() , 32usize , concat ! (
               "Size of: " , stringify ! ( pmLongOptions ) ));
    assert_eq! (::std::mem::align_of::<pmLongOptions>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pmLongOptions ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLongOptions ) ) . long_opt as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLongOptions ) , "::"
                , stringify ! ( long_opt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLongOptions ) ) . has_arg as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLongOptions ) , "::"
                , stringify ! ( has_arg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLongOptions ) ) . short_opt as * const
                _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLongOptions ) , "::"
                , stringify ! ( short_opt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLongOptions ) ) . argname as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLongOptions ) , "::"
                , stringify ! ( argname ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmLongOptions ) ) . message as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( pmLongOptions ) , "::"
                , stringify ! ( message ) ));
}
impl Clone for pmLongOptions {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn pmgetopt_r(arg1: ::std::os::raw::c_int,
                      arg2: *const *const ::std::os::raw::c_char,
                      arg3: *mut pmOptions) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetOptions(arg1: ::std::os::raw::c_int,
                        arg2: *const *const ::std::os::raw::c_char,
                        arg3: *mut pmOptions) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetContextOptions(arg1: ::std::os::raw::c_int,
                               arg2: *mut pmOptions) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmUsageMessage(arg1: *mut pmOptions);
}
extern "C" {
    pub fn pmFreeOptions(arg1: *mut pmOptions);
}
extern "C" {
    pub fn pmLoadDerivedConfig(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmRegisterDerivedMetric(arg1: *const ::std::os::raw::c_char,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmRegisterDerived(arg1: *const ::std::os::raw::c_char,
                             arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmDerivedErrStr() -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmEventParameter {
    pub ep_pmid: pmID,
    pub _bitfield_1: u32,
}
#[test]
fn bindgen_test_layout_pmEventParameter() {
    assert_eq!(::std::mem::size_of::<pmEventParameter>() , 8usize , concat ! (
               "Size of: " , stringify ! ( pmEventParameter ) ));
    assert_eq! (::std::mem::align_of::<pmEventParameter>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( pmEventParameter ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmEventParameter ) ) . ep_pmid as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmEventParameter ) ,
                "::" , stringify ! ( ep_pmid ) ));
}
impl Clone for pmEventParameter {
    fn clone(&self) -> Self { *self }
}
impl pmEventParameter {
    #[inline]
    pub fn ep_len(&self) -> ::std::os::raw::c_uint {
        let mask = 16777215usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_ep_len(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 16777215usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn ep_type(&self) -> ::std::os::raw::c_uint {
        let mask = 4278190080usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_ep_type(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 4278190080usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 24usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmEventRecord {
    pub er_timestamp: __pmTimeval,
    pub er_flags: ::std::os::raw::c_uint,
    pub er_nparams: ::std::os::raw::c_int,
    pub er_param: [pmEventParameter; 1usize],
}
#[test]
fn bindgen_test_layout_pmEventRecord() {
    assert_eq!(::std::mem::size_of::<pmEventRecord>() , 24usize , concat ! (
               "Size of: " , stringify ! ( pmEventRecord ) ));
    assert_eq! (::std::mem::align_of::<pmEventRecord>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( pmEventRecord ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmEventRecord ) ) . er_timestamp as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmEventRecord ) , "::"
                , stringify ! ( er_timestamp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmEventRecord ) ) . er_flags as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmEventRecord ) , "::"
                , stringify ! ( er_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmEventRecord ) ) . er_nparams as * const
                _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( pmEventRecord ) , "::"
                , stringify ! ( er_nparams ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmEventRecord ) ) . er_param as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( pmEventRecord ) , "::"
                , stringify ! ( er_param ) ));
}
impl Clone for pmEventRecord {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmHighResEventRecord {
    pub er_timestamp: __pmTimespec,
    pub er_flags: ::std::os::raw::c_uint,
    pub er_nparams: ::std::os::raw::c_int,
    pub er_param: [pmEventParameter; 1usize],
}
#[test]
fn bindgen_test_layout_pmHighResEventRecord() {
    assert_eq!(::std::mem::size_of::<pmHighResEventRecord>() , 32usize ,
               concat ! ( "Size of: " , stringify ! ( pmHighResEventRecord )
               ));
    assert_eq! (::std::mem::align_of::<pmHighResEventRecord>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( pmHighResEventRecord ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmHighResEventRecord ) ) . er_timestamp
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pmHighResEventRecord )
                , "::" , stringify ! ( er_timestamp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmHighResEventRecord ) ) . er_flags as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( pmHighResEventRecord )
                , "::" , stringify ! ( er_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmHighResEventRecord ) ) . er_nparams as
                * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( pmHighResEventRecord )
                , "::" , stringify ! ( er_nparams ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmHighResEventRecord ) ) . er_param as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( pmHighResEventRecord )
                , "::" , stringify ! ( er_param ) ));
}
impl Clone for pmHighResEventRecord {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmEventArray {
    pub _bitfield_1: u32,
    pub ea_nrecords: ::std::os::raw::c_int,
    pub ea_record: [pmEventRecord; 1usize],
}
#[test]
fn bindgen_test_layout_pmEventArray() {
    assert_eq!(::std::mem::size_of::<pmEventArray>() , 32usize , concat ! (
               "Size of: " , stringify ! ( pmEventArray ) ));
    assert_eq! (::std::mem::align_of::<pmEventArray>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( pmEventArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmEventArray ) ) . ea_nrecords as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( pmEventArray ) , "::" ,
                stringify ! ( ea_nrecords ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmEventArray ) ) . ea_record as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmEventArray ) , "::" ,
                stringify ! ( ea_record ) ));
}
impl Clone for pmEventArray {
    fn clone(&self) -> Self { *self }
}
impl pmEventArray {
    #[inline]
    pub fn ea_len(&self) -> ::std::os::raw::c_uint {
        let mask = 16777215usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_ea_len(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 16777215usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn ea_type(&self) -> ::std::os::raw::c_uint {
        let mask = 4278190080usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_ea_type(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 4278190080usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 24usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct pmHighResEventArray {
    pub _bitfield_1: u32,
    pub ea_nrecords: ::std::os::raw::c_int,
    pub ea_record: [pmHighResEventRecord; 1usize],
}
#[test]
fn bindgen_test_layout_pmHighResEventArray() {
    assert_eq!(::std::mem::size_of::<pmHighResEventArray>() , 40usize , concat
               ! ( "Size of: " , stringify ! ( pmHighResEventArray ) ));
    assert_eq! (::std::mem::align_of::<pmHighResEventArray>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( pmHighResEventArray ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmHighResEventArray ) ) . ea_nrecords as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( pmHighResEventArray ) ,
                "::" , stringify ! ( ea_nrecords ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pmHighResEventArray ) ) . ea_record as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( pmHighResEventArray ) ,
                "::" , stringify ! ( ea_record ) ));
}
impl Clone for pmHighResEventArray {
    fn clone(&self) -> Self { *self }
}
impl pmHighResEventArray {
    #[inline]
    pub fn ea_len(&self) -> ::std::os::raw::c_uint {
        let mask = 16777215usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_ea_len(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 16777215usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
    #[inline]
    pub fn ea_type(&self) -> ::std::os::raw::c_uint {
        let mask = 4278190080usize as u32;
        let field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_ea_type(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 4278190080usize as u32;
        let val = val as u32 as u32;
        let mut field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        field_val &= !mask;
        field_val |= (val << 24usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(field_val) };
    }
}
extern "C" {
    pub fn pmUnpackEventRecords(arg1: *mut pmValueSet,
                                arg2: ::std::os::raw::c_int,
                                arg3: *mut *mut *mut pmResult)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmFreeEventResult(arg1: *mut *mut pmResult);
}
extern "C" {
    pub fn pmUnpackHighResEventRecords(arg1: *mut pmValueSet,
                                       arg2: ::std::os::raw::c_int,
                                       arg3: *mut *mut *mut pmHighResResult)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmFreeHighResEventResult(arg1: *mut *mut pmHighResResult);
}
extern "C" {
    pub fn pmDiscoverServices(arg1: *const ::std::os::raw::c_char,
                              arg2: *const ::std::os::raw::c_char,
                              arg3: *mut *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmParseUnitsStr(arg1: *const ::std::os::raw::c_char,
                           arg2: *mut pmUnits, arg3: *mut f64,
                           arg4: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pmFetchGroup {
    _unused: [u8; 0],
}
pub type pmFG = *mut __pmFetchGroup;
extern "C" {
    pub fn pmCreateFetchGroup(arg1: *mut pmFG, arg2: ::std::os::raw::c_int,
                              arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmGetFetchGroupContext(arg1: pmFG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmExtendFetchGroup_item(arg1: pmFG,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: *const ::std::os::raw::c_char,
                                   arg4: *const ::std::os::raw::c_char,
                                   arg5: *mut pmAtomValue,
                                   arg6: ::std::os::raw::c_int,
                                   arg7: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmExtendFetchGroup_indom(arg1: pmFG,
                                    arg2: *const ::std::os::raw::c_char,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: *mut ::std::os::raw::c_int,
                                    arg5: *mut *mut ::std::os::raw::c_char,
                                    arg6: *mut pmAtomValue,
                                    arg7: ::std::os::raw::c_int,
                                    arg8: *mut ::std::os::raw::c_int,
                                    arg9: ::std::os::raw::c_uint,
                                    arg10: *mut ::std::os::raw::c_uint,
                                    arg11: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmExtendFetchGroup_event(arg1: pmFG,
                                    arg2: *const ::std::os::raw::c_char,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: *const ::std::os::raw::c_char,
                                    arg5: *const ::std::os::raw::c_char,
                                    arg6: *mut timespec,
                                    arg7: *mut pmAtomValue,
                                    arg8: ::std::os::raw::c_int,
                                    arg9: *mut ::std::os::raw::c_int,
                                    arg10: ::std::os::raw::c_uint,
                                    arg11: *mut ::std::os::raw::c_uint,
                                    arg12: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmExtendFetchGroup_timestamp(arg1: pmFG, arg2: *mut timeval)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmFetchGroup(arg1: pmFG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmDestroyFetchGroup(arg1: pmFG) -> ::std::os::raw::c_int;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum mmv_metric_type {
    MMV_TYPE_NOSUPPORT = -1,
    MMV_TYPE_I32 = 0,
    MMV_TYPE_U32 = 1,
    MMV_TYPE_I64 = 2,
    MMV_TYPE_U64 = 3,
    MMV_TYPE_FLOAT = 4,
    MMV_TYPE_DOUBLE = 5,
    MMV_TYPE_STRING = 6,
    MMV_TYPE_ELAPSED = 9,
}
pub use self::mmv_metric_type as mmv_metric_type_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum mmv_metric_sem {
    MMV_SEM_COUNTER = 1,
    MMV_SEM_INSTANT = 3,
    MMV_SEM_DISCRETE = 4,
}
pub use self::mmv_metric_sem as mmv_metric_sem_t;
#[repr(C)]
pub struct mmv_instances {
    pub internal: __int32_t,
    pub external: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_mmv_instances() {
    assert_eq!(::std::mem::size_of::<mmv_instances>() , 68usize , concat ! (
               "Size of: " , stringify ! ( mmv_instances ) ));
    assert_eq! (::std::mem::align_of::<mmv_instances>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( mmv_instances ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_instances ) ) . internal as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_instances ) , "::"
                , stringify ! ( internal ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_instances ) ) . external as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_instances ) , "::"
                , stringify ! ( external ) ));
}
pub type mmv_instances_t = mmv_instances;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mmv_instances2 {
    pub internal: __int32_t,
    pub external: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mmv_instances2() {
    assert_eq!(::std::mem::size_of::<mmv_instances2>() , 16usize , concat ! (
               "Size of: " , stringify ! ( mmv_instances2 ) ));
    assert_eq! (::std::mem::align_of::<mmv_instances2>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mmv_instances2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_instances2 ) ) . internal as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_instances2 ) , "::"
                , stringify ! ( internal ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_instances2 ) ) . external as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_instances2 ) , "::"
                , stringify ! ( external ) ));
}
impl Clone for mmv_instances2 {
    fn clone(&self) -> Self { *self }
}
pub type mmv_instances2_t = mmv_instances2;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mmv_indom {
    pub serial: __uint32_t,
    pub count: __uint32_t,
    pub instances: *mut mmv_instances_t,
    pub shorttext: *mut ::std::os::raw::c_char,
    pub helptext: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mmv_indom() {
    assert_eq!(::std::mem::size_of::<mmv_indom>() , 32usize , concat ! (
               "Size of: " , stringify ! ( mmv_indom ) ));
    assert_eq! (::std::mem::align_of::<mmv_indom>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mmv_indom ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom ) ) . serial as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom ) , "::" ,
                stringify ! ( serial ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom ) ) . count as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom ) , "::" ,
                stringify ! ( count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom ) ) . instances as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom ) , "::" ,
                stringify ! ( instances ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom ) ) . shorttext as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom ) , "::" ,
                stringify ! ( shorttext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom ) ) . helptext as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom ) , "::" ,
                stringify ! ( helptext ) ));
}
impl Clone for mmv_indom {
    fn clone(&self) -> Self { *self }
}
pub type mmv_indom_t = mmv_indom;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mmv_indom2 {
    pub serial: __uint32_t,
    pub count: __uint32_t,
    pub instances: *mut mmv_instances2_t,
    pub shorttext: *mut ::std::os::raw::c_char,
    pub helptext: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mmv_indom2() {
    assert_eq!(::std::mem::size_of::<mmv_indom2>() , 32usize , concat ! (
               "Size of: " , stringify ! ( mmv_indom2 ) ));
    assert_eq! (::std::mem::align_of::<mmv_indom2>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mmv_indom2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom2 ) ) . serial as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom2 ) , "::" ,
                stringify ! ( serial ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom2 ) ) . count as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom2 ) , "::" ,
                stringify ! ( count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom2 ) ) . instances as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom2 ) , "::" ,
                stringify ! ( instances ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom2 ) ) . shorttext as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom2 ) , "::" ,
                stringify ! ( shorttext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_indom2 ) ) . helptext as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_indom2 ) , "::" ,
                stringify ! ( helptext ) ));
}
impl Clone for mmv_indom2 {
    fn clone(&self) -> Self { *self }
}
pub type mmv_indom2_t = mmv_indom2;
#[repr(C)]
pub struct mmv_metric {
    pub name: [::std::os::raw::c_char; 64usize],
    pub item: __uint32_t,
    pub type_: mmv_metric_type_t,
    pub semantics: mmv_metric_sem_t,
    pub dimension: pmUnits,
    pub indom: __uint32_t,
    pub shorttext: *mut ::std::os::raw::c_char,
    pub helptext: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mmv_metric() {
    assert_eq!(::std::mem::size_of::<mmv_metric>() , 104usize , concat ! (
               "Size of: " , stringify ! ( mmv_metric ) ));
    assert_eq! (::std::mem::align_of::<mmv_metric>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mmv_metric ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric ) ) . name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric ) ) . item as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric ) , "::" ,
                stringify ! ( item ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric ) ) . type_ as * const _ as
                usize } , 68usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric ) , "::" ,
                stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric ) ) . semantics as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric ) , "::" ,
                stringify ! ( semantics ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric ) ) . dimension as * const _
                as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric ) , "::" ,
                stringify ! ( dimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric ) ) . indom as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric ) , "::" ,
                stringify ! ( indom ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric ) ) . shorttext as * const _
                as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric ) , "::" ,
                stringify ! ( shorttext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric ) ) . helptext as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric ) , "::" ,
                stringify ! ( helptext ) ));
}
pub type mmv_metric_t = mmv_metric;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct mmv_metric2 {
    pub name: *mut ::std::os::raw::c_char,
    pub item: __uint32_t,
    pub type_: mmv_metric_type_t,
    pub semantics: mmv_metric_sem_t,
    pub dimension: pmUnits,
    pub indom: __uint32_t,
    pub shorttext: *mut ::std::os::raw::c_char,
    pub helptext: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mmv_metric2() {
    assert_eq!(::std::mem::size_of::<mmv_metric2>() , 48usize , concat ! (
               "Size of: " , stringify ! ( mmv_metric2 ) ));
    assert_eq! (::std::mem::align_of::<mmv_metric2>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( mmv_metric2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric2 ) ) . name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric2 ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric2 ) ) . item as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric2 ) , "::" ,
                stringify ! ( item ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric2 ) ) . type_ as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric2 ) , "::" ,
                stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric2 ) ) . semantics as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric2 ) , "::" ,
                stringify ! ( semantics ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric2 ) ) . dimension as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric2 ) , "::" ,
                stringify ! ( dimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric2 ) ) . indom as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric2 ) , "::" ,
                stringify ! ( indom ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric2 ) ) . shorttext as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric2 ) , "::" ,
                stringify ! ( shorttext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const mmv_metric2 ) ) . helptext as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( mmv_metric2 ) , "::" ,
                stringify ! ( helptext ) ));
}
impl Clone for mmv_metric2 {
    fn clone(&self) -> Self { *self }
}
pub type mmv_metric2_t = mmv_metric2;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum mmv_stats_flags {
    MMV_FLAG_NOPREFIX = 1,
    MMV_FLAG_PROCESS = 2,
    MMV_FLAG_SENTINEL = 4,
}
pub use self::mmv_stats_flags as mmv_stats_flags_t;
extern "C" {
    pub fn mmv_stats_init(arg1: *const ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int,
                          arg3: mmv_stats_flags_t, arg4: *const mmv_metric_t,
                          arg5: ::std::os::raw::c_int,
                          arg6: *const mmv_indom_t,
                          arg7: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mmv_stats2_init(arg1: *const ::std::os::raw::c_char,
                           arg2: ::std::os::raw::c_int,
                           arg3: mmv_stats_flags_t,
                           arg4: *const mmv_metric2_t,
                           arg5: ::std::os::raw::c_int,
                           arg6: *const mmv_indom2_t,
                           arg7: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mmv_stats_stop(arg1: *const ::std::os::raw::c_char,
                          arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mmv_lookup_value_desc(arg1: *mut ::std::os::raw::c_void,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: *const ::std::os::raw::c_char)
     -> *mut pmAtomValue;
}
extern "C" {
    pub fn mmv_inc_value(arg1: *mut ::std::os::raw::c_void,
                         arg2: *mut pmAtomValue, arg3: f64);
}
extern "C" {
    pub fn mmv_set_value(arg1: *mut ::std::os::raw::c_void,
                         arg2: *mut pmAtomValue, arg3: f64);
}
extern "C" {
    pub fn mmv_set_string(arg1: *mut ::std::os::raw::c_void,
                          arg2: *mut pmAtomValue,
                          arg3: *const ::std::os::raw::c_char,
                          arg4: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mmv_stats_add(arg1: *mut ::std::os::raw::c_void,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *const ::std::os::raw::c_char, arg4: f64);
}
extern "C" {
    pub fn mmv_stats_inc(arg1: *mut ::std::os::raw::c_void,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mmv_stats_set(arg1: *mut ::std::os::raw::c_void,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *const ::std::os::raw::c_char, arg4: f64);
}
extern "C" {
    pub fn mmv_stats_add_fallback(arg1: *mut ::std::os::raw::c_void,
                                  arg2: *const ::std::os::raw::c_char,
                                  arg3: *const ::std::os::raw::c_char,
                                  arg4: *const ::std::os::raw::c_char,
                                  arg5: f64);
}
extern "C" {
    pub fn mmv_stats_inc_fallback(arg1: *mut ::std::os::raw::c_void,
                                  arg2: *const ::std::os::raw::c_char,
                                  arg3: *const ::std::os::raw::c_char,
                                  arg4: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mmv_stats_interval_start(arg1: *mut ::std::os::raw::c_void,
                                    arg2: *mut pmAtomValue,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: *const ::std::os::raw::c_char)
     -> *mut pmAtomValue;
}
extern "C" {
    pub fn mmv_stats_interval_end(arg1: *mut ::std::os::raw::c_void,
                                  arg2: *mut pmAtomValue);
}
extern "C" {
    pub fn mmv_stats_set_string(arg1: *mut ::std::os::raw::c_void,
                                arg2: *const ::std::os::raw::c_char,
                                arg3: *const ::std::os::raw::c_char,
                                arg4: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mmv_stats_set_strlen(arg1: *mut ::std::os::raw::c_void,
                                arg2: *const ::std::os::raw::c_char,
                                arg3: *const ::std::os::raw::c_char,
                                arg4: *const ::std::os::raw::c_char,
                                arg5: usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_data {
    pub _address: u8,
}
impl Clone for __locale_data {
    fn clone(&self) -> Self { *self }
}
